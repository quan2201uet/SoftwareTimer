
Drone_Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000414c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800425c  0800425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080042c8  080042c8  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080042c8  080042c8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080042d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000177c  20000060  08004330  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017dc  08004330  000067dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114bf  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0a  00000000  00000000  00017548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  0001a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c37  00000000  00000000  0001b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000461b  00000000  00000000  0001be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011497  00000000  00000000  00020492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090dd3  00000000  00000000  00031929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c26fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000c2740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c6b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004244 	.word	0x08004244

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004244 	.word	0x08004244

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	@ (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000031c 	.word	0x2000031c
 80001b0:	200003bc 	.word	0x200003bc

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b5b0      	push	{r4, r5, r7, lr}
 80001b6:	b088      	sub	sp, #32
 80001b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ba:	f000 f9b3 	bl	8000524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001be:	f000 f81b 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c2:	f000 f855 	bl	8000270 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <main+0x3c>)
 80001c8:	1d3c      	adds	r4, r7, #4
 80001ca:	461d      	mov	r5, r3
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fad7 	bl	8001790 <osThreadCreate>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a03      	ldr	r2, [pc, #12]	@ (80001f4 <main+0x40>)
 80001e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001e8:	f001 facb 	bl	8001782 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	bf00      	nop
 80001ee:	e7fd      	b.n	80001ec <main+0x38>
 80001f0:	08004268 	.word	0x08004268
 80001f4:	200007bc 	.word	0x200007bc

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 ff2e 	bl	8004068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fc26 	bl	8000a80 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023a:	f000 f873 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fe94 	bl	8000f84 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000262:	f000 f85f 	bl	8000324 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	@ 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <MX_GPIO_Init+0x78>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <MX_GPIO_Init+0x78>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_GPIO_Init+0x78>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0310 	and.w	r3, r3, #16
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_GPIO_Init+0x78>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <MX_GPIO_Init+0x78>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <MX_GPIO_Init+0x78>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ba:	480c      	ldr	r0, [pc, #48]	@ (80002ec <MX_GPIO_Init+0x7c>)
 80002bc:	f000 fbc8 	bl	8000a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	2302      	movs	r3, #2
 80002d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	4619      	mov	r1, r3
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <MX_GPIO_Init+0x7c>)
 80002da:	f000 fa35 	bl	8000748 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002de:	bf00      	nop
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40011000 	.word	0x40011000

080002f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f001 fa95 	bl	8001828 <osDelay>
 80002fe:	e7fb      	b.n	80002f8 <StartDefaultTask+0x8>

08000300 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d101      	bne.n	8000316 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000312:	f000 f91d 	bl	8000550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40012c00 	.word	0x40012c00

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <Error_Handler+0x8>

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <HAL_MspInit+0x68>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a17      	ldr	r2, [pc, #92]	@ (8000398 <HAL_MspInit+0x68>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <HAL_MspInit+0x68>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <HAL_MspInit+0x68>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <HAL_MspInit+0x68>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_MspInit+0x68>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	210f      	movs	r1, #15
 800036a:	f06f 0001 	mvn.w	r0, #1
 800036e:	f000 f9c0 	bl	80006f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_MspInit+0x6c>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <HAL_MspInit+0x6c>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	@ 0x30
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80003a8:	2300      	movs	r3, #0
 80003aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000470 <HAL_InitTick+0xd0>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000470 <HAL_InitTick+0xd0>)
 80003bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000470 <HAL_InitTick+0xd0>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003ce:	f107 020c 	add.w	r2, r7, #12
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 ff2f 	bl	800123c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003de:	f000 ff19 	bl	8001214 <HAL_RCC_GetPCLK2Freq>
 80003e2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003e6:	4a23      	ldr	r2, [pc, #140]	@ (8000474 <HAL_InitTick+0xd4>)
 80003e8:	fba2 2303 	umull	r2, r3, r2, r3
 80003ec:	0c9b      	lsrs	r3, r3, #18
 80003ee:	3b01      	subs	r3, #1
 80003f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <HAL_InitTick+0xd8>)
 80003f4:	4a21      	ldr	r2, [pc, #132]	@ (800047c <HAL_InitTick+0xdc>)
 80003f6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80003f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <HAL_InitTick+0xd8>)
 80003fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000400:	4a1d      	ldr	r2, [pc, #116]	@ (8000478 <HAL_InitTick+0xd8>)
 8000402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000404:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000406:	4b1c      	ldr	r3, [pc, #112]	@ (8000478 <HAL_InitTick+0xd8>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b1a      	ldr	r3, [pc, #104]	@ (8000478 <HAL_InitTick+0xd8>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000412:	4b19      	ldr	r3, [pc, #100]	@ (8000478 <HAL_InitTick+0xd8>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000418:	4817      	ldr	r0, [pc, #92]	@ (8000478 <HAL_InitTick+0xd8>)
 800041a:	f000 ff5d 	bl	80012d8 <HAL_TIM_Base_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000428:	2b00      	cmp	r3, #0
 800042a:	d11b      	bne.n	8000464 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800042c:	4812      	ldr	r0, [pc, #72]	@ (8000478 <HAL_InitTick+0xd8>)
 800042e:	f000 ffab 	bl	8001388 <HAL_TIM_Base_Start_IT>
 8000432:	4603      	mov	r3, r0
 8000434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000438:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800043c:	2b00      	cmp	r3, #0
 800043e:	d111      	bne.n	8000464 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000440:	2019      	movs	r0, #25
 8000442:	f000 f972 	bl	800072a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b0f      	cmp	r3, #15
 800044a:	d808      	bhi.n	800045e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800044c:	2200      	movs	r2, #0
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	2019      	movs	r0, #25
 8000452:	f000 f94e 	bl	80006f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <HAL_InitTick+0xe0>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	e002      	b.n	8000464 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000464:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000468:	4618      	mov	r0, r3
 800046a:	3730      	adds	r7, #48	@ 0x30
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	431bde83 	.word	0x431bde83
 8000478:	200007c0 	.word	0x200007c0
 800047c:	40012c00 	.word	0x40012c00
 8000480:	20000004 	.word	0x20000004

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <NMI_Handler+0x4>

0800048c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <MemManage_Handler+0x4>

0800049c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <UsageFault_Handler+0x4>

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <TIM1_UP_IRQHandler+0x10>)
 80004be:	f000 ffb5 	bl	800142c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200007c0 	.word	0x200007c0

080004cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d8:	f7ff fff8 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	@ (800050c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004de:	490c      	ldr	r1, [pc, #48]	@ (8000510 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a09      	ldr	r2, [pc, #36]	@ (8000518 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f4:	4c09      	ldr	r4, [pc, #36]	@ (800051c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000502:	f003 fe17 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fe55 	bl	80001b4 <main>
  bx lr
 800050a:	4770      	bx	lr
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000514:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 8000518:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800051c:	200017dc 	.word	0x200017dc

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>
	...

08000524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <HAL_Init+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <HAL_Init+0x28>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f8d1 	bl	80006dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053a:	200f      	movs	r0, #15
 800053c:	f7ff ff30 	bl	80003a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000540:	f7ff fef6 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <HAL_IncTick+0x1c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <HAL_IncTick+0x20>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4413      	add	r3, r2
 8000560:	4a03      	ldr	r2, [pc, #12]	@ (8000570 <HAL_IncTick+0x20>)
 8000562:	6013      	str	r3, [r2, #0]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000008 	.word	0x20000008
 8000570:	20000808 	.word	0x20000808

08000574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return uwTick;
 8000578:	4b02      	ldr	r3, [pc, #8]	@ (8000584 <HAL_GetTick+0x10>)
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20000808 	.word	0x20000808

08000588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ba:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	60d3      	str	r3, [r2, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <__NVIC_GetPriorityGrouping+0x18>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	f003 0307 	and.w	r3, r3, #7
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db0b      	blt.n	8000616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 021f 	and.w	r2, r3, #31
 8000604:	4906      	ldr	r1, [pc, #24]	@ (8000620 <__NVIC_EnableIRQ+0x34>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	095b      	lsrs	r3, r3, #5
 800060c:	2001      	movs	r0, #1
 800060e:	fa00 f202 	lsl.w	r2, r0, r2
 8000612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	e000e100 	.word	0xe000e100

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	@ (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	@ (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	@ 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	@ 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff4f 	bl	8000588 <__NVIC_SetPriorityGrouping>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4603      	mov	r3, r0
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000704:	f7ff ff64 	bl	80005d0 <__NVIC_GetPriorityGrouping>
 8000708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	6978      	ldr	r0, [r7, #20]
 8000710:	f7ff ffb2 	bl	8000678 <NVIC_EncodePriority>
 8000714:	4602      	mov	r2, r0
 8000716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff81 	bl	8000624 <__NVIC_SetPriority>
}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff57 	bl	80005ec <__NVIC_EnableIRQ>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000748:	b480      	push	{r7}
 800074a:	b08b      	sub	sp, #44	@ 0x2c
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800075a:	e169      	b.n	8000a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800075c:	2201      	movs	r2, #1
 800075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	69fa      	ldr	r2, [r7, #28]
 800076c:	4013      	ands	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	429a      	cmp	r2, r3
 8000776:	f040 8158 	bne.w	8000a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a9a      	ldr	r2, [pc, #616]	@ (80009e8 <HAL_GPIO_Init+0x2a0>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d05e      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 8000784:	4a98      	ldr	r2, [pc, #608]	@ (80009e8 <HAL_GPIO_Init+0x2a0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d875      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 800078a:	4a98      	ldr	r2, [pc, #608]	@ (80009ec <HAL_GPIO_Init+0x2a4>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d058      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 8000790:	4a96      	ldr	r2, [pc, #600]	@ (80009ec <HAL_GPIO_Init+0x2a4>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d86f      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 8000796:	4a96      	ldr	r2, [pc, #600]	@ (80009f0 <HAL_GPIO_Init+0x2a8>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d052      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 800079c:	4a94      	ldr	r2, [pc, #592]	@ (80009f0 <HAL_GPIO_Init+0x2a8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d869      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007a2:	4a94      	ldr	r2, [pc, #592]	@ (80009f4 <HAL_GPIO_Init+0x2ac>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d04c      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 80007a8:	4a92      	ldr	r2, [pc, #584]	@ (80009f4 <HAL_GPIO_Init+0x2ac>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d863      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007ae:	4a92      	ldr	r2, [pc, #584]	@ (80009f8 <HAL_GPIO_Init+0x2b0>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d046      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 80007b4:	4a90      	ldr	r2, [pc, #576]	@ (80009f8 <HAL_GPIO_Init+0x2b0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d85d      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007ba:	2b12      	cmp	r3, #18
 80007bc:	d82a      	bhi.n	8000814 <HAL_GPIO_Init+0xcc>
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d859      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007c2:	a201      	add	r2, pc, #4	@ (adr r2, 80007c8 <HAL_GPIO_Init+0x80>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	08000843 	.word	0x08000843
 80007cc:	0800081d 	.word	0x0800081d
 80007d0:	0800082f 	.word	0x0800082f
 80007d4:	08000871 	.word	0x08000871
 80007d8:	08000877 	.word	0x08000877
 80007dc:	08000877 	.word	0x08000877
 80007e0:	08000877 	.word	0x08000877
 80007e4:	08000877 	.word	0x08000877
 80007e8:	08000877 	.word	0x08000877
 80007ec:	08000877 	.word	0x08000877
 80007f0:	08000877 	.word	0x08000877
 80007f4:	08000877 	.word	0x08000877
 80007f8:	08000877 	.word	0x08000877
 80007fc:	08000877 	.word	0x08000877
 8000800:	08000877 	.word	0x08000877
 8000804:	08000877 	.word	0x08000877
 8000808:	08000877 	.word	0x08000877
 800080c:	08000825 	.word	0x08000825
 8000810:	08000839 	.word	0x08000839
 8000814:	4a79      	ldr	r2, [pc, #484]	@ (80009fc <HAL_GPIO_Init+0x2b4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d013      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800081a:	e02c      	b.n	8000876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	623b      	str	r3, [r7, #32]
          break;
 8000822:	e029      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	3304      	adds	r3, #4
 800082a:	623b      	str	r3, [r7, #32]
          break;
 800082c:	e024      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	3308      	adds	r3, #8
 8000834:	623b      	str	r3, [r7, #32]
          break;
 8000836:	e01f      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	330c      	adds	r3, #12
 800083e:	623b      	str	r3, [r7, #32]
          break;
 8000840:	e01a      	b.n	8000878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d102      	bne.n	8000850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800084a:	2304      	movs	r3, #4
 800084c:	623b      	str	r3, [r7, #32]
          break;
 800084e:	e013      	b.n	8000878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d105      	bne.n	8000864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000858:	2308      	movs	r3, #8
 800085a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	611a      	str	r2, [r3, #16]
          break;
 8000862:	e009      	b.n	8000878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000864:	2308      	movs	r3, #8
 8000866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	615a      	str	r2, [r3, #20]
          break;
 800086e:	e003      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
          break;
 8000874:	e000      	b.n	8000878 <HAL_GPIO_Init+0x130>
          break;
 8000876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2bff      	cmp	r3, #255	@ 0xff
 800087c:	d801      	bhi.n	8000882 <HAL_GPIO_Init+0x13a>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	e001      	b.n	8000886 <HAL_GPIO_Init+0x13e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3304      	adds	r3, #4
 8000886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	2bff      	cmp	r3, #255	@ 0xff
 800088c:	d802      	bhi.n	8000894 <HAL_GPIO_Init+0x14c>
 800088e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	e002      	b.n	800089a <HAL_GPIO_Init+0x152>
 8000894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000896:	3b08      	subs	r3, #8
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	210f      	movs	r1, #15
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	401a      	ands	r2, r3
 80008ac:	6a39      	ldr	r1, [r7, #32]
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	431a      	orrs	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000a00 <HAL_GPIO_Init+0x2b8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a4c      	ldr	r2, [pc, #304]	@ (8000a00 <HAL_GPIO_Init+0x2b8>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000a00 <HAL_GPIO_Init+0x2b8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008e0:	4a48      	ldr	r2, [pc, #288]	@ (8000a04 <HAL_GPIO_Init+0x2bc>)
 80008e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	220f      	movs	r2, #15
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a40      	ldr	r2, [pc, #256]	@ (8000a08 <HAL_GPIO_Init+0x2c0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d013      	beq.n	8000934 <HAL_GPIO_Init+0x1ec>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a0c <HAL_GPIO_Init+0x2c4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d00d      	beq.n	8000930 <HAL_GPIO_Init+0x1e8>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a3e      	ldr	r2, [pc, #248]	@ (8000a10 <HAL_GPIO_Init+0x2c8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d007      	beq.n	800092c <HAL_GPIO_Init+0x1e4>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a14 <HAL_GPIO_Init+0x2cc>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d101      	bne.n	8000928 <HAL_GPIO_Init+0x1e0>
 8000924:	2303      	movs	r3, #3
 8000926:	e006      	b.n	8000936 <HAL_GPIO_Init+0x1ee>
 8000928:	2304      	movs	r3, #4
 800092a:	e004      	b.n	8000936 <HAL_GPIO_Init+0x1ee>
 800092c:	2302      	movs	r3, #2
 800092e:	e002      	b.n	8000936 <HAL_GPIO_Init+0x1ee>
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <HAL_GPIO_Init+0x1ee>
 8000934:	2300      	movs	r3, #0
 8000936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000938:	f002 0203 	and.w	r2, r2, #3
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	4093      	lsls	r3, r2
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	4313      	orrs	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000946:	492f      	ldr	r1, [pc, #188]	@ (8000a04 <HAL_GPIO_Init+0x2bc>)
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3302      	adds	r3, #2
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	492c      	ldr	r1, [pc, #176]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	608b      	str	r3, [r1, #8]
 800096c:	e006      	b.n	800097c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	43db      	mvns	r3, r3
 8000976:	4928      	ldr	r1, [pc, #160]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 8000978:	4013      	ands	r3, r2
 800097a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	4922      	ldr	r1, [pc, #136]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	60cb      	str	r3, [r1, #12]
 8000994:	e006      	b.n	80009a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	43db      	mvns	r3, r3
 800099e:	491e      	ldr	r1, [pc, #120]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009a0:	4013      	ands	r3, r2
 80009a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d006      	beq.n	80009be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4918      	ldr	r1, [pc, #96]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	604b      	str	r3, [r1, #4]
 80009bc:	e006      	b.n	80009cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	43db      	mvns	r3, r3
 80009c6:	4914      	ldr	r1, [pc, #80]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009c8:	4013      	ands	r3, r2
 80009ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d021      	beq.n	8000a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	490e      	ldr	r1, [pc, #56]	@ (8000a18 <HAL_GPIO_Init+0x2d0>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	600b      	str	r3, [r1, #0]
 80009e4:	e021      	b.n	8000a2a <HAL_GPIO_Init+0x2e2>
 80009e6:	bf00      	nop
 80009e8:	10320000 	.word	0x10320000
 80009ec:	10310000 	.word	0x10310000
 80009f0:	10220000 	.word	0x10220000
 80009f4:	10210000 	.word	0x10210000
 80009f8:	10120000 	.word	0x10120000
 80009fc:	10110000 	.word	0x10110000
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010000 	.word	0x40010000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40011400 	.word	0x40011400
 8000a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_GPIO_Init+0x304>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4909      	ldr	r1, [pc, #36]	@ (8000a4c <HAL_GPIO_Init+0x304>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a36:	fa22 f303 	lsr.w	r3, r2, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f47f ae8e 	bne.w	800075c <HAL_GPIO_Init+0x14>
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	372c      	adds	r7, #44	@ 0x2c
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40010400 	.word	0x40010400

08000a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a60:	787b      	ldrb	r3, [r7, #1]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a66:	887a      	ldrh	r2, [r7, #2]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a6c:	e003      	b.n	8000a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	041a      	lsls	r2, r3, #16
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	611a      	str	r2, [r3, #16]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e272      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8087 	beq.w	8000bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aa0:	4b92      	ldr	r3, [pc, #584]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d00c      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aac:	4b8f      	ldr	r3, [pc, #572]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 030c 	and.w	r3, r3, #12
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d112      	bne.n	8000ade <HAL_RCC_OscConfig+0x5e>
 8000ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ac4:	d10b      	bne.n	8000ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac6:	4b89      	ldr	r3, [pc, #548]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d06c      	beq.n	8000bac <HAL_RCC_OscConfig+0x12c>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d168      	bne.n	8000bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e24c      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ae6:	d106      	bne.n	8000af6 <HAL_RCC_OscConfig+0x76>
 8000ae8:	4b80      	ldr	r3, [pc, #512]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a7f      	ldr	r2, [pc, #508]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e02e      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x98>
 8000afe:	4b7b      	ldr	r3, [pc, #492]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a7a      	ldr	r2, [pc, #488]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b78      	ldr	r3, [pc, #480]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a77      	ldr	r2, [pc, #476]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e01d      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b20:	d10c      	bne.n	8000b3c <HAL_RCC_OscConfig+0xbc>
 8000b22:	4b72      	ldr	r3, [pc, #456]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a71      	ldr	r2, [pc, #452]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a6e      	ldr	r2, [pc, #440]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e00b      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a6a      	ldr	r2, [pc, #424]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b68      	ldr	r3, [pc, #416]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a67      	ldr	r2, [pc, #412]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fd0a 	bl	8000574 <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b64:	f7ff fd06 	bl	8000574 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	@ 0x64
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e200      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b76:	4b5d      	ldr	r3, [pc, #372]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f0      	beq.n	8000b64 <HAL_RCC_OscConfig+0xe4>
 8000b82:	e014      	b.n	8000bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b84:	f7ff fcf6 	bl	8000574 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fcf2 	bl	8000574 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b64      	cmp	r3, #100	@ 0x64
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e1ec      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b9e:	4b53      	ldr	r3, [pc, #332]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f0      	bne.n	8000b8c <HAL_RCC_OscConfig+0x10c>
 8000baa:	e000      	b.n	8000bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d063      	beq.n	8000c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bba:	4b4c      	ldr	r3, [pc, #304]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bc6:	4b49      	ldr	r3, [pc, #292]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 030c 	and.w	r3, r3, #12
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d11c      	bne.n	8000c0c <HAL_RCC_OscConfig+0x18c>
 8000bd2:	4b46      	ldr	r3, [pc, #280]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d116      	bne.n	8000c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bde:	4b43      	ldr	r3, [pc, #268]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x176>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d001      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e1c0      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4939      	ldr	r1, [pc, #228]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	e03a      	b.n	8000c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d020      	beq.n	8000c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <HAL_RCC_OscConfig+0x270>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fcab 	bl	8000574 <HAL_GetTick>
 8000c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fca7 	bl	8000574 <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e1a1      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f0      	beq.n	8000c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c40:	4b2a      	ldr	r3, [pc, #168]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4927      	ldr	r1, [pc, #156]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
 8000c54:	e015      	b.n	8000c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_RCC_OscConfig+0x270>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc8a 	bl	8000574 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fc86 	bl	8000574 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e180      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d03a      	beq.n	8000d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d019      	beq.n	8000cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <HAL_RCC_OscConfig+0x274>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9c:	f7ff fc6a 	bl	8000574 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc66 	bl	8000574 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e160      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 faea 	bl	800129c <RCC_Delay>
 8000cc8:	e01c      	b.n	8000d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_RCC_OscConfig+0x274>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fc50 	bl	8000574 <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd6:	e00f      	b.n	8000cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fc4c 	bl	8000574 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d908      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e146      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	42420000 	.word	0x42420000
 8000cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	4b92      	ldr	r3, [pc, #584]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1e9      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80a6 	beq.w	8000e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d16:	4b8b      	ldr	r3, [pc, #556]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10d      	bne.n	8000d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b88      	ldr	r3, [pc, #544]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a87      	ldr	r2, [pc, #540]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b85      	ldr	r3, [pc, #532]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d3e:	4b82      	ldr	r3, [pc, #520]	@ (8000f48 <HAL_RCC_OscConfig+0x4c8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d118      	bne.n	8000d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f48 <HAL_RCC_OscConfig+0x4c8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8000f48 <HAL_RCC_OscConfig+0x4c8>)
 8000d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc0d 	bl	8000574 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d5e:	f7ff fc09 	bl	8000574 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b64      	cmp	r3, #100	@ 0x64
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e103      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d70:	4b75      	ldr	r3, [pc, #468]	@ (8000f48 <HAL_RCC_OscConfig+0x4c8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d106      	bne.n	8000d92 <HAL_RCC_OscConfig+0x312>
 8000d84:	4b6f      	ldr	r3, [pc, #444]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4a6e      	ldr	r2, [pc, #440]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6213      	str	r3, [r2, #32]
 8000d90:	e02d      	b.n	8000dee <HAL_RCC_OscConfig+0x36e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x334>
 8000d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a69      	ldr	r2, [pc, #420]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000da0:	f023 0301 	bic.w	r3, r3, #1
 8000da4:	6213      	str	r3, [r2, #32]
 8000da6:	4b67      	ldr	r3, [pc, #412]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a66      	ldr	r2, [pc, #408]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	f023 0304 	bic.w	r3, r3, #4
 8000db0:	6213      	str	r3, [r2, #32]
 8000db2:	e01c      	b.n	8000dee <HAL_RCC_OscConfig+0x36e>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d10c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x356>
 8000dbc:	4b61      	ldr	r3, [pc, #388]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	4a60      	ldr	r2, [pc, #384]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6213      	str	r3, [r2, #32]
 8000dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6213      	str	r3, [r2, #32]
 8000dd4:	e00b      	b.n	8000dee <HAL_RCC_OscConfig+0x36e>
 8000dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	4a5a      	ldr	r2, [pc, #360]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6213      	str	r3, [r2, #32]
 8000de2:	4b58      	ldr	r3, [pc, #352]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a57      	ldr	r2, [pc, #348]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d015      	beq.n	8000e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fbbd 	bl	8000574 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fbb9 	bl	8000574 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e0b1      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	4b4b      	ldr	r3, [pc, #300]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0ee      	beq.n	8000dfe <HAL_RCC_OscConfig+0x37e>
 8000e20:	e014      	b.n	8000e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fba7 	bl	8000574 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fba3 	bl	8000574 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e09b      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	4b40      	ldr	r3, [pc, #256]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1ee      	bne.n	8000e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e52:	4b3c      	ldr	r3, [pc, #240]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a3b      	ldr	r2, [pc, #236]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8087 	beq.w	8000f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e68:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d061      	beq.n	8000f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d146      	bne.n	8000f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7c:	4b33      	ldr	r3, [pc, #204]	@ (8000f4c <HAL_RCC_OscConfig+0x4cc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb77 	bl	8000574 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb73 	bl	8000574 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e06d      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eb0:	d108      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	4921      	ldr	r1, [pc, #132]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a19      	ldr	r1, [r3, #32]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	491b      	ldr	r1, [pc, #108]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_RCC_OscConfig+0x4cc>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fb47 	bl	8000574 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eea:	f7ff fb43 	bl	8000574 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e03d      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x46a>
 8000f08:	e035      	b.n	8000f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_RCC_OscConfig+0x4cc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb30 	bl	8000574 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f18:	f7ff fb2c 	bl	8000574 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e026      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x498>
 8000f36:	e01e      	b.n	8000f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d107      	bne.n	8000f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e019      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40007000 	.word	0x40007000
 8000f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_RCC_OscConfig+0x500>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e0d0      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f98:	4b6a      	ldr	r3, [pc, #424]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d910      	bls.n	8000fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa6:	4b67      	ldr	r3, [pc, #412]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 0207 	bic.w	r2, r3, #7
 8000fae:	4965      	ldr	r1, [pc, #404]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb6:	4b63      	ldr	r3, [pc, #396]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d001      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0b8      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d020      	beq.n	8001016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe0:	4b59      	ldr	r3, [pc, #356]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a58      	ldr	r2, [pc, #352]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff8:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a52      	ldr	r2, [pc, #328]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001004:	4b50      	ldr	r3, [pc, #320]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	494d      	ldr	r1, [pc, #308]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d040      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d107      	bne.n	800103a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	4b47      	ldr	r3, [pc, #284]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d115      	bne.n	8001062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e07f      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001042:	4b41      	ldr	r3, [pc, #260]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e073      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e06b      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001062:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f023 0203 	bic.w	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4936      	ldr	r1, [pc, #216]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001074:	f7ff fa7e 	bl	8000574 <HAL_GetTick>
 8001078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107a:	e00a      	b.n	8001092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800107c:	f7ff fa7a 	bl	8000574 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108a:	4293      	cmp	r3, r2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e053      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001092:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 020c 	and.w	r2, r3, #12
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d1eb      	bne.n	800107c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d210      	bcs.n	80010d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 0207 	bic.w	r2, r3, #7
 80010ba:	4922      	ldr	r1, [pc, #136]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e032      	b.n	800113a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e0:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	4916      	ldr	r1, [pc, #88]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	490e      	ldr	r1, [pc, #56]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001112:	f000 f821 	bl	8001158 <HAL_RCC_GetSysClockFreq>
 8001116:	4602      	mov	r2, r0
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	490a      	ldr	r1, [pc, #40]	@ (800114c <HAL_RCC_ClockConfig+0x1c8>)
 8001124:	5ccb      	ldrb	r3, [r1, r3]
 8001126:	fa22 f303 	lsr.w	r3, r2, r3
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <HAL_RCC_ClockConfig+0x1cc>)
 800112c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_RCC_ClockConfig+0x1d0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f934 	bl	80003a0 <HAL_InitTick>

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000
 8001148:	40021000 	.word	0x40021000
 800114c:	0800429c 	.word	0x0800429c
 8001150:	20000000 	.word	0x20000000
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001172:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d002      	beq.n	8001188 <HAL_RCC_GetSysClockFreq+0x30>
 8001182:	2b08      	cmp	r3, #8
 8001184:	d003      	beq.n	800118e <HAL_RCC_GetSysClockFreq+0x36>
 8001186:	e027      	b.n	80011d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800118a:	613b      	str	r3, [r7, #16]
      break;
 800118c:	e027      	b.n	80011de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	0c9b      	lsrs	r3, r3, #18
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_RCC_GetSysClockFreq+0x94>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	0c5b      	lsrs	r3, r3, #17
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e004      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	613b      	str	r3, [r7, #16]
      break;
 80011d6:	e002      	b.n	80011de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80011da:	613b      	str	r3, [r7, #16]
      break;
 80011dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011de:	693b      	ldr	r3, [r7, #16]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	007a1200 	.word	0x007a1200
 80011f4:	080042b4 	.word	0x080042b4
 80011f8:	080042c4 	.word	0x080042c4
 80011fc:	003d0900 	.word	0x003d0900

08001200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001204:	4b02      	ldr	r3, [pc, #8]	@ (8001210 <HAL_RCC_GetHCLKFreq+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000000 	.word	0x20000000

08001214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001218:	f7ff fff2 	bl	8001200 <HAL_RCC_GetHCLKFreq>
 800121c:	4602      	mov	r2, r0
 800121e:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	0adb      	lsrs	r3, r3, #11
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	4903      	ldr	r1, [pc, #12]	@ (8001238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800122a:	5ccb      	ldrb	r3, [r1, r3]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	080042ac 	.word	0x080042ac

0800123c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	220f      	movs	r2, #15
 800124a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_RCC_GetClockConfig+0x58>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_RCC_GetClockConfig+0x58>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_RCC_GetClockConfig+0x58>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_RCC_GetClockConfig+0x58>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_RCC_GetClockConfig+0x5c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0207 	and.w	r2, r3, #7
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000
 8001298:	40022000 	.word	0x40022000

0800129c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <RCC_Delay+0x34>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <RCC_Delay+0x38>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012b8:	bf00      	nop
  }
  while (Delay --);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	60fa      	str	r2, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f9      	bne.n	80012b8 <RCC_Delay+0x1c>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000
 80012d4:	10624dd3 	.word	0x10624dd3

080012d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e041      	b.n	800136e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f839 	bl	8001376 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2202      	movs	r2, #2
 8001308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3304      	adds	r3, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f000 f99c 	bl	8001654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d001      	beq.n	80013a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e03a      	b.n	8001416 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a18      	ldr	r2, [pc, #96]	@ (8001420 <HAL_TIM_Base_Start_IT+0x98>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00e      	beq.n	80013e0 <HAL_TIM_Base_Start_IT+0x58>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ca:	d009      	beq.n	80013e0 <HAL_TIM_Base_Start_IT+0x58>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <HAL_TIM_Base_Start_IT+0x9c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_TIM_Base_Start_IT+0x58>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <HAL_TIM_Base_Start_IT+0xa0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d111      	bne.n	8001404 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d010      	beq.n	8001414 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001402:	e007      	b.n	8001414 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40012c00 	.word	0x40012c00
 8001424:	40000400 	.word	0x40000400
 8001428:	40000800 	.word	0x40000800

0800142c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d020      	beq.n	8001490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01b      	beq.n	8001490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0202 	mvn.w	r2, #2
 8001460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f8d1 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 800147c:	e005      	b.n	800148a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f8c4 	bl	800160c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f8d3 	bl	8001630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d020      	beq.n	80014dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01b      	beq.n	80014dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0204 	mvn.w	r2, #4
 80014ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2202      	movs	r2, #2
 80014b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f8ab 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 80014c8:	e005      	b.n	80014d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f89e 	bl	800160c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f8ad 	bl	8001630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d020      	beq.n	8001528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f06f 0208 	mvn.w	r2, #8
 80014f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f885 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 8001514:	e005      	b.n	8001522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f878 	bl	800160c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f887 	bl	8001630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	2b00      	cmp	r3, #0
 8001530:	d020      	beq.n	8001574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01b      	beq.n	8001574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0210 	mvn.w	r2, #16
 8001544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2208      	movs	r2, #8
 800154a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f85f 	bl	800161e <HAL_TIM_IC_CaptureCallback>
 8001560:	e005      	b.n	800156e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f852 	bl	800160c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f861 	bl	8001630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f06f 0201 	mvn.w	r2, #1
 8001590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7fe feb4 	bl	8000300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80015b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8c3 	bl	8001742 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80015d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f831 	bl	8001642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0220 	mvn.w	r2, #32
 80015fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f896 	bl	8001730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a2f      	ldr	r2, [pc, #188]	@ (8001724 <TIM_Base_SetConfig+0xd0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00b      	beq.n	8001684 <TIM_Base_SetConfig+0x30>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001672:	d007      	beq.n	8001684 <TIM_Base_SetConfig+0x30>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a2c      	ldr	r2, [pc, #176]	@ (8001728 <TIM_Base_SetConfig+0xd4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d003      	beq.n	8001684 <TIM_Base_SetConfig+0x30>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <TIM_Base_SetConfig+0xd8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d108      	bne.n	8001696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800168a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <TIM_Base_SetConfig+0xd0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00b      	beq.n	80016b6 <TIM_Base_SetConfig+0x62>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a4:	d007      	beq.n	80016b6 <TIM_Base_SetConfig+0x62>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <TIM_Base_SetConfig+0xd4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d003      	beq.n	80016b6 <TIM_Base_SetConfig+0x62>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <TIM_Base_SetConfig+0xd8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d108      	bne.n	80016c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <TIM_Base_SetConfig+0xd0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d103      	bne.n	80016fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f023 0201 	bic.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	611a      	str	r2, [r3, #16]
  }
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40000400 	.word	0x40000400
 800172c:	40000800 	.word	0x40000800

08001730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001766:	2b84      	cmp	r3, #132	@ 0x84
 8001768:	d005      	beq.n	8001776 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800176a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	3303      	adds	r3, #3
 8001774:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001786:	f000 ffed 	bl	8002764 <vTaskStartScheduler>
  
  return osOK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}

08001790 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b089      	sub	sp, #36	@ 0x24
 8001794:	af04      	add	r7, sp, #16
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d020      	beq.n	80017e4 <osThreadCreate+0x54>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01c      	beq.n	80017e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685c      	ldr	r4, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691e      	ldr	r6, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ffc9 	bl	8001754 <makeFreeRtosPriority>
 80017c2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017cc:	9202      	str	r2, [sp, #8]
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	9100      	str	r1, [sp, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4632      	mov	r2, r6
 80017d6:	4629      	mov	r1, r5
 80017d8:	4620      	mov	r0, r4
 80017da:	f000 fddd 	bl	8002398 <xTaskCreateStatic>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e01c      	b.n	800181e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685c      	ldr	r4, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017f0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffab 	bl	8001754 <makeFreeRtosPriority>
 80017fe:	4602      	mov	r2, r0
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4632      	mov	r2, r6
 800180c:	4629      	mov	r1, r5
 800180e:	4620      	mov	r0, r4
 8001810:	f000 fe22 	bl	8002458 <xTaskCreate>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001828 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <osDelay+0x16>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	e000      	b.n	8001840 <osDelay+0x18>
 800183e:	2301      	movs	r3, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f000 ff59 	bl	80026f8 <vTaskDelay>
  
  return osOK;
 8001846:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f103 0208 	add.w	r2, r3, #8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f103 0208 	add.w	r2, r3, #8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f103 0208 	add.w	r2, r3, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001902:	d103      	bne.n	800190c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e00c      	b.n	8001926 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3308      	adds	r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e002      	b.n	800191a <vListInsert+0x2e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	429a      	cmp	r2, r3
 8001924:	d2f6      	bcs.n	8001914 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6892      	ldr	r2, [r2, #8]
 8001972:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6852      	ldr	r2, [r2, #4]
 800197c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d103      	bne.n	8001990 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
	...

080019b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10b      	bne.n	80019dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019c8:	f383 8811 	msr	BASEPRI, r3
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f3bf 8f4f 	dsb	sy
 80019d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80019dc:	f002 f856 	bl	8003a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	441a      	add	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	441a      	add	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	22ff      	movs	r2, #255	@ 0xff
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d114      	bne.n	8001a5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01a      	beq.n	8001a70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3310      	adds	r3, #16
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 f928 	bl	8002c94 <xTaskRemoveFromEventList>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d012      	beq.n	8001a70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <xQueueGenericReset+0xd0>)
 8001a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	e009      	b.n	8001a70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3310      	adds	r3, #16
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fef5 	bl	8001850 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3324      	adds	r3, #36	@ 0x24
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fef0 	bl	8001850 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a70:	f002 f83c 	bl	8003aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000ed04 	.word	0xe000ed04

08001a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	@ 0x38
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10b      	bne.n	8001ab0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10b      	bne.n	8001ace <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	e7fd      	b.n	8001aca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <xQueueGenericCreateStatic+0x56>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <xQueueGenericCreateStatic+0x5a>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <xQueueGenericCreateStatic+0x5c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	623b      	str	r3, [r7, #32]
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <xQueueGenericCreateStatic+0x84>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <xQueueGenericCreateStatic+0x88>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <xQueueGenericCreateStatic+0x8a>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10b      	bne.n	8001b2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b16:	f383 8811 	msr	BASEPRI, r3
 8001b1a:	f3bf 8f6f 	isb	sy
 8001b1e:	f3bf 8f4f 	dsb	sy
 8001b22:	61fb      	str	r3, [r7, #28]
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	e7fd      	b.n	8001b26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001b2a:	2348      	movs	r3, #72	@ 0x48
 8001b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b48      	cmp	r3, #72	@ 0x48
 8001b32:	d00b      	beq.n	8001b4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b38:	f383 8811 	msr	BASEPRI, r3
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	61bb      	str	r3, [r7, #24]
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001b4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f805 	bl	8001b7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3730      	adds	r7, #48	@ 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e002      	b.n	8001ba0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bac:	2101      	movs	r1, #1
 8001bae:	69b8      	ldr	r0, [r7, #24]
 8001bb0:	f7ff fefe 	bl	80019b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	@ 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10b      	bne.n	8001bf0 <xQueueGenericSend+0x34>
	__asm volatile
 8001bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <xQueueGenericSend+0x42>
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <xQueueGenericSend+0x46>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <xQueueGenericSend+0x48>
 8001c02:	2300      	movs	r3, #0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10b      	bne.n	8001c20 <xQueueGenericSend+0x64>
	__asm volatile
 8001c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d103      	bne.n	8001c2e <xQueueGenericSend+0x72>
 8001c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <xQueueGenericSend+0x76>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <xQueueGenericSend+0x78>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10b      	bne.n	8001c50 <xQueueGenericSend+0x94>
	__asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	623b      	str	r3, [r7, #32]
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c50:	f001 f9e6 	bl	8003020 <xTaskGetSchedulerState>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <xQueueGenericSend+0xa4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <xQueueGenericSend+0xa8>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <xQueueGenericSend+0xaa>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <xQueueGenericSend+0xc6>
	__asm volatile
 8001c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	61fb      	str	r3, [r7, #28]
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c82:	f001 ff03 	bl	8003a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d302      	bcc.n	8001c98 <xQueueGenericSend+0xdc>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d129      	bne.n	8001cec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c9e:	f000 fa0f 	bl	80020c0 <prvCopyDataToQueue>
 8001ca2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cae:	3324      	adds	r3, #36	@ 0x24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 ffef 	bl	8002c94 <xTaskRemoveFromEventList>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <xQueueGenericSend+0x200>)
 8001cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	e00a      	b.n	8001ce4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <xQueueGenericSend+0x200>)
 8001cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ce4:	f001 ff02 	bl	8003aec <vPortExitCritical>
				return pdPASS;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e063      	b.n	8001db4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cf2:	f001 fefb 	bl	8003aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e05c      	b.n	8001db4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d106      	bne.n	8001d0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 f829 	bl	8002d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d0e:	f001 feed 	bl	8003aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d12:	f000 fd97 	bl	8002844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d16:	f001 feb9 	bl	8003a8c <vPortEnterCritical>
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d103      	bne.n	8001d30 <xQueueGenericSend+0x174>
 8001d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d103      	bne.n	8001d46 <xQueueGenericSend+0x18a>
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d46:	f001 fed1 	bl	8003aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d4a:	1d3a      	adds	r2, r7, #4
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f818 	bl	8002d88 <xTaskCheckForTimeOut>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d124      	bne.n	8001da8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d60:	f000 faa6 	bl	80022b0 <prvIsQueueFull>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d018      	beq.n	8001d9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 ff3c 	bl	8002bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d7a:	f000 fa31 	bl	80021e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d7e:	f000 fd6f 	bl	8002860 <xTaskResumeAll>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f af7c 	bne.w	8001c82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <xQueueGenericSend+0x200>)
 8001d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	e772      	b.n	8001c82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d9e:	f000 fa1f 	bl	80021e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001da2:	f000 fd5d 	bl	8002860 <xTaskResumeAll>
 8001da6:	e76c      	b.n	8001c82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001daa:	f000 fa19 	bl	80021e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001dae:	f000 fd57 	bl	8002860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3738      	adds	r7, #56	@ 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	e000ed04 	.word	0xe000ed04

08001dc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b090      	sub	sp, #64	@ 0x40
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <xQueueGenericSendFromISR+0x3e>
 8001df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <xQueueGenericSendFromISR+0x42>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <xQueueGenericSendFromISR+0x44>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10b      	bne.n	8001e20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d103      	bne.n	8001e2e <xQueueGenericSendFromISR+0x6e>
 8001e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <xQueueGenericSendFromISR+0x72>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <xQueueGenericSendFromISR+0x74>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	623b      	str	r3, [r7, #32]
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e50:	f001 fede 	bl	8003c10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e54:	f3ef 8211 	mrs	r2, BASEPRI
 8001e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	61fa      	str	r2, [r7, #28]
 8001e6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d302      	bcc.n	8001e82 <xQueueGenericSendFromISR+0xc2>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d12f      	bne.n	8001ee2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e98:	f000 f912 	bl	80020c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d112      	bne.n	8001ecc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb0:	3324      	adds	r3, #36	@ 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 feee 	bl	8002c94 <xTaskRemoveFromEventList>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00e      	beq.n	8001edc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e007      	b.n	8001edc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	b25a      	sxtb	r2, r3
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001edc:	2301      	movs	r3, #1
 8001ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001ee0:	e001      	b.n	8001ee6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001ef0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3740      	adds	r7, #64	@ 0x40
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10b      	bne.n	8001f2e <xQueueReceive+0x32>
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	623b      	str	r3, [r7, #32]
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	e7fd      	b.n	8001f2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <xQueueReceive+0x40>
 8001f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <xQueueReceive+0x44>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <xQueueReceive+0x46>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <xQueueReceive+0x62>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	61fb      	str	r3, [r7, #28]
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f5e:	f001 f85f 	bl	8003020 <xTaskGetSchedulerState>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <xQueueReceive+0x72>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <xQueueReceive+0x76>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <xQueueReceive+0x78>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <xQueueReceive+0x94>
	__asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	61bb      	str	r3, [r7, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f90:	f001 fd7c 	bl	8003a8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01f      	beq.n	8001fe0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fa4:	f000 f8f6 	bl	8002194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00f      	beq.n	8001fd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fba:	3310      	adds	r3, #16
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fe69 	bl	8002c94 <xTaskRemoveFromEventList>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <xQueueReceive+0x1c0>)
 8001fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001fd8:	f001 fd88 	bl	8003aec <vPortExitCritical>
				return pdPASS;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e069      	b.n	80020b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fe6:	f001 fd81 	bl	8003aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e062      	b.n	80020b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 feaf 	bl	8002d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002002:	f001 fd73 	bl	8003aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002006:	f000 fc1d 	bl	8002844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800200a:	f001 fd3f 	bl	8003a8c <vPortEnterCritical>
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002014:	b25b      	sxtb	r3, r3
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d103      	bne.n	8002024 <xQueueReceive+0x128>
 800201c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002026:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800202a:	b25b      	sxtb	r3, r3
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d103      	bne.n	800203a <xQueueReceive+0x13e>
 8002032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800203a:	f001 fd57 	bl	8003aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800203e:	1d3a      	adds	r2, r7, #4
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fe9e 	bl	8002d88 <xTaskCheckForTimeOut>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d123      	bne.n	800209a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002054:	f000 f916 	bl	8002284 <prvIsQueueEmpty>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d017      	beq.n	800208e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	3324      	adds	r3, #36	@ 0x24
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fdc2 	bl	8002bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800206c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800206e:	f000 f8b7 	bl	80021e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002072:	f000 fbf5 	bl	8002860 <xTaskResumeAll>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d189      	bne.n	8001f90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <xQueueReceive+0x1c0>)
 800207e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	e780      	b.n	8001f90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800208e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002090:	f000 f8a6 	bl	80021e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002094:	f000 fbe4 	bl	8002860 <xTaskResumeAll>
 8002098:	e77a      	b.n	8001f90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800209a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800209c:	f000 f8a0 	bl	80021e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020a0:	f000 fbde 	bl	8002860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020a6:	f000 f8ed 	bl	8002284 <prvIsQueueEmpty>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f43f af6f 	beq.w	8001f90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80020b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3730      	adds	r7, #48	@ 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	e000ed04 	.word	0xe000ed04

080020c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d14d      	bne.n	8002182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 ffb6 	bl	800305c <xTaskPriorityDisinherit>
 80020f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e043      	b.n	8002182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d119      	bne.n	8002134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6858      	ldr	r0, [r3, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	461a      	mov	r2, r3
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	f002 f838 	bl	8004180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	441a      	add	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d32b      	bcc.n	8002182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e026      	b.n	8002182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68d8      	ldr	r0, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	461a      	mov	r2, r3
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	f002 f81e 	bl	8004180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	425b      	negs	r3, r3
 800214e:	441a      	add	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	425b      	negs	r3, r3
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d105      	bne.n	8002182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	3b01      	subs	r3, #1
 8002180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800218a:	697b      	ldr	r3, [r7, #20]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d018      	beq.n	80021d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d303      	bcc.n	80021c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	461a      	mov	r2, r3
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	f001 ffd4 	bl	8004180 <memcpy>
	}
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021e8:	f001 fc50 	bl	8003a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021f4:	e011      	b.n	800221a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3324      	adds	r3, #36	@ 0x24
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fd46 	bl	8002c94 <xTaskRemoveFromEventList>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800220e:	f000 fe1f 	bl	8002e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3b01      	subs	r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	dce9      	bgt.n	80021f6 <prvUnlockQueue+0x16>
 8002222:	e000      	b.n	8002226 <prvUnlockQueue+0x46>
					break;
 8002224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	22ff      	movs	r2, #255	@ 0xff
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800222e:	f001 fc5d 	bl	8003aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002232:	f001 fc2b 	bl	8003a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800223c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800223e:	e011      	b.n	8002264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d012      	beq.n	800226e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3310      	adds	r3, #16
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fd21 	bl	8002c94 <xTaskRemoveFromEventList>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002258:	f000 fdfa 	bl	8002e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	3b01      	subs	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002268:	2b00      	cmp	r3, #0
 800226a:	dce9      	bgt.n	8002240 <prvUnlockQueue+0x60>
 800226c:	e000      	b.n	8002270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800226e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	22ff      	movs	r2, #255	@ 0xff
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002278:	f001 fc38 	bl	8003aec <vPortExitCritical>
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800228c:	f001 fbfe 	bl	8003a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002298:	2301      	movs	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e001      	b.n	80022a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022a2:	f001 fc23 	bl	8003aec <vPortExitCritical>

	return xReturn;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022b8:	f001 fbe8 	bl	8003a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d102      	bne.n	80022ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e001      	b.n	80022d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022d2:	f001 fc0b 	bl	8003aec <vPortExitCritical>

	return xReturn;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e014      	b.n	800231a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80022f0:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <vQueueAddToRegistry+0x4c>)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022fc:	490b      	ldr	r1, [pc, #44]	@ (800232c <vQueueAddToRegistry+0x4c>)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002306:	4a09      	ldr	r2, [pc, #36]	@ (800232c <vQueueAddToRegistry+0x4c>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002312:	e006      	b.n	8002322 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3301      	adds	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b07      	cmp	r3, #7
 800231e:	d9e7      	bls.n	80022f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	2000080c 	.word	0x2000080c

08002330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002340:	f001 fba4 	bl	8003a8c <vPortEnterCritical>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800234a:	b25b      	sxtb	r3, r3
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d103      	bne.n	800235a <vQueueWaitForMessageRestricted+0x2a>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002360:	b25b      	sxtb	r3, r3
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d103      	bne.n	8002370 <vQueueWaitForMessageRestricted+0x40>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002370:	f001 fbbc 	bl	8003aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3324      	adds	r3, #36	@ 0x24
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fc59 	bl	8002c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff28 	bl	80021e0 <prvUnlockQueue>
	}
 8002390:	bf00      	nop
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	@ 0x38
 800239c:	af04      	add	r7, sp, #16
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80023a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	623b      	str	r3, [r7, #32]
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80023c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	61fb      	str	r3, [r7, #28]
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023e2:	23a0      	movs	r3, #160	@ 0xa0
 80023e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80023ea:	d00b      	beq.n	8002404 <xTaskCreateStatic+0x6c>
	__asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	61bb      	str	r3, [r7, #24]
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002404:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01e      	beq.n	800244a <xTaskCreateStatic+0xb2>
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01b      	beq.n	800244a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	2202      	movs	r2, #2
 8002420:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002424:	2300      	movs	r3, #0
 8002426:	9303      	str	r3, [sp, #12]
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f851 	bl	80024e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002442:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002444:	f000 f8ee 	bl	8002624 <prvAddNewTaskToReadyList>
 8002448:	e001      	b.n	800244e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800244e:	697b      	ldr	r3, [r7, #20]
	}
 8002450:	4618      	mov	r0, r3
 8002452:	3728      	adds	r7, #40	@ 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	@ 0x30
 800245c:	af04      	add	r7, sp, #16
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fc0f 	bl	8003c90 <pvPortMalloc>
 8002472:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00e      	beq.n	8002498 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800247a:	20a0      	movs	r0, #160	@ 0xa0
 800247c:	f001 fc08 	bl	8003c90 <pvPortMalloc>
 8002480:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
 800248e:	e005      	b.n	800249c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f001 fccb 	bl	8003e2c <vPortFree>
 8002496:	e001      	b.n	800249c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d017      	beq.n	80024d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f80f 	bl	80024e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024c6:	69f8      	ldr	r0, [r7, #28]
 80024c8:	f000 f8ac 	bl	8002624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80024cc:	2301      	movs	r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e002      	b.n	80024d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024d8:	69bb      	ldr	r3, [r7, #24]
	}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024fc:	3b01      	subs	r3, #1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f023 0307 	bic.w	r3, r3, #7
 800250a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	617b      	str	r3, [r7, #20]
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	e7fd      	b.n	800252a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01f      	beq.n	8002574 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	e012      	b.n	8002560 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	7819      	ldrb	r1, [r3, #0]
 8002542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	3334      	adds	r3, #52	@ 0x34
 800254a:	460a      	mov	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4413      	add	r3, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	d9e9      	bls.n	800253a <prvInitialiseNewTask+0x56>
 8002566:	e000      	b.n	800256a <prvInitialiseNewTask+0x86>
			{
				break;
 8002568:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002572:	e003      	b.n	800257c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	2b06      	cmp	r3, #6
 8002580:	d901      	bls.n	8002586 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002582:	2306      	movs	r3, #6
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	3304      	adds	r3, #4
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f976 	bl	800188e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	3318      	adds	r3, #24
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f971 	bl	800188e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b4:	f1c3 0207 	rsb	r2, r3, #7
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	334c      	adds	r3, #76	@ 0x4c
 80025d6:	224c      	movs	r2, #76	@ 0x4c
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 fd44 	bl	8004068 <memset>
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002618 <prvInitialiseNewTask+0x134>)
 80025e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	4a0c      	ldr	r2, [pc, #48]	@ (800261c <prvInitialiseNewTask+0x138>)
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <prvInitialiseNewTask+0x13c>)
 80025f0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	69b8      	ldr	r0, [r7, #24]
 80025f8:	f001 f95a 	bl	80038b0 <pxPortInitialiseStack>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002600:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800260c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800260e:	bf00      	nop
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000169c 	.word	0x2000169c
 800261c:	20001704 	.word	0x20001704
 8002620:	2000176c 	.word	0x2000176c

08002624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800262c:	f001 fa2e 	bl	8003a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002630:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <prvAddNewTaskToReadyList+0xb8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a29      	ldr	r2, [pc, #164]	@ (80026dc <prvAddNewTaskToReadyList+0xb8>)
 8002638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800263a:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <prvAddNewTaskToReadyList+0xbc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002642:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <prvAddNewTaskToReadyList+0xbc>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002648:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <prvAddNewTaskToReadyList+0xb8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d110      	bne.n	8002672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002650:	f000 fc22 	bl	8002e98 <prvInitialiseTaskLists>
 8002654:	e00d      	b.n	8002672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002656:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <prvAddNewTaskToReadyList+0xc0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <prvAddNewTaskToReadyList+0xbc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	429a      	cmp	r2, r3
 800266a:	d802      	bhi.n	8002672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800266c:	4a1c      	ldr	r2, [pc, #112]	@ (80026e0 <prvAddNewTaskToReadyList+0xbc>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002672:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <prvAddNewTaskToReadyList+0xc4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <prvAddNewTaskToReadyList+0xc4>)
 800267a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <prvAddNewTaskToReadyList+0xc8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <prvAddNewTaskToReadyList+0xc8>)
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <prvAddNewTaskToReadyList+0xcc>)
 800269c:	441a      	add	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4610      	mov	r0, r2
 80026a6:	f7ff f8fe 	bl	80018a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026aa:	f001 fa1f 	bl	8003aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80026ae:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <prvAddNewTaskToReadyList+0xc0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00e      	beq.n	80026d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <prvAddNewTaskToReadyList+0xbc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <prvAddNewTaskToReadyList+0xd0>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000094c 	.word	0x2000094c
 80026e0:	2000084c 	.word	0x2000084c
 80026e4:	20000958 	.word	0x20000958
 80026e8:	20000968 	.word	0x20000968
 80026ec:	20000954 	.word	0x20000954
 80026f0:	20000850 	.word	0x20000850
 80026f4:	e000ed04 	.word	0xe000ed04

080026f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d018      	beq.n	800273c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800270a:	4b14      	ldr	r3, [pc, #80]	@ (800275c <vTaskDelay+0x64>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <vTaskDelay+0x32>
	__asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	60bb      	str	r3, [r7, #8]
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	e7fd      	b.n	8002726 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800272a:	f000 f88b 	bl	8002844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800272e:	2100      	movs	r1, #0
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fd1b 	bl	800316c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002736:	f000 f893 	bl	8002860 <xTaskResumeAll>
 800273a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <vTaskDelay+0x68>)
 8002744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000974 	.word	0x20000974
 8002760:	e000ed04 	.word	0xe000ed04

08002764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002772:	463a      	mov	r2, r7
 8002774:	1d39      	adds	r1, r7, #4
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fce8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	9202      	str	r2, [sp, #8]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2300      	movs	r3, #0
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	460a      	mov	r2, r1
 8002792:	4924      	ldr	r1, [pc, #144]	@ (8002824 <vTaskStartScheduler+0xc0>)
 8002794:	4824      	ldr	r0, [pc, #144]	@ (8002828 <vTaskStartScheduler+0xc4>)
 8002796:	f7ff fdff 	bl	8002398 <xTaskCreateStatic>
 800279a:	4603      	mov	r3, r0
 800279c:	4a23      	ldr	r2, [pc, #140]	@ (800282c <vTaskStartScheduler+0xc8>)
 800279e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <vTaskStartScheduler+0xc8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027a8:	2301      	movs	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e001      	b.n	80027b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80027b8:	f000 fd3e 	bl	8003238 <xTimerCreateTimerTask>
 80027bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d11b      	bne.n	80027fc <vTaskStartScheduler+0x98>
	__asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	613b      	str	r3, [r7, #16]
}
 80027d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80027d8:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <vTaskStartScheduler+0xcc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	334c      	adds	r3, #76	@ 0x4c
 80027de:	4a15      	ldr	r2, [pc, #84]	@ (8002834 <vTaskStartScheduler+0xd0>)
 80027e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <vTaskStartScheduler+0xd4>)
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027ea:	4b14      	ldr	r3, [pc, #80]	@ (800283c <vTaskStartScheduler+0xd8>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <vTaskStartScheduler+0xdc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027f6:	f001 f8d7 	bl	80039a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027fa:	e00f      	b.n	800281c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d10b      	bne.n	800281c <vTaskStartScheduler+0xb8>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	60fb      	str	r3, [r7, #12]
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <vTaskStartScheduler+0xb4>
}
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	08004284 	.word	0x08004284
 8002828:	08002e69 	.word	0x08002e69
 800282c:	20000970 	.word	0x20000970
 8002830:	2000084c 	.word	0x2000084c
 8002834:	20000010 	.word	0x20000010
 8002838:	2000096c 	.word	0x2000096c
 800283c:	20000958 	.word	0x20000958
 8002840:	20000950 	.word	0x20000950

08002844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <vTaskSuspendAll+0x18>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	4a03      	ldr	r2, [pc, #12]	@ (800285c <vTaskSuspendAll+0x18>)
 8002850:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000974 	.word	0x20000974

08002860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800286e:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <xTaskResumeAll+0x118>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10b      	bne.n	800288e <xTaskResumeAll+0x2e>
	__asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	603b      	str	r3, [r7, #0]
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	e7fd      	b.n	800288a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800288e:	f001 f8fd 	bl	8003a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002892:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <xTaskResumeAll+0x118>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3b01      	subs	r3, #1
 8002898:	4a37      	ldr	r2, [pc, #220]	@ (8002978 <xTaskResumeAll+0x118>)
 800289a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289c:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <xTaskResumeAll+0x118>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d161      	bne.n	8002968 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028a4:	4b35      	ldr	r3, [pc, #212]	@ (800297c <xTaskResumeAll+0x11c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05d      	beq.n	8002968 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028ac:	e02e      	b.n	800290c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ae:	4b34      	ldr	r3, [pc, #208]	@ (8002980 <xTaskResumeAll+0x120>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3318      	adds	r3, #24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f84e 	bl	800195c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f849 	bl	800195c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	2201      	movs	r2, #1
 80028d0:	409a      	lsls	r2, r3
 80028d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <xTaskResumeAll+0x124>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <xTaskResumeAll+0x124>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <xTaskResumeAll+0x128>)
 80028ea:	441a      	add	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f7fe ffd7 	bl	80018a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fc:	4b23      	ldr	r3, [pc, #140]	@ (800298c <xTaskResumeAll+0x12c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002906:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <xTaskResumeAll+0x130>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800290c:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <xTaskResumeAll+0x120>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1cc      	bne.n	80028ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800291a:	f000 fb61 	bl	8002fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800291e:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <xTaskResumeAll+0x134>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800292a:	f000 f845 	bl	80029b8 <xTaskIncrementTick>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002934:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <xTaskResumeAll+0x130>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3b01      	subs	r3, #1
 800293e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f1      	bne.n	800292a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <xTaskResumeAll+0x134>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <xTaskResumeAll+0x130>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002954:	2301      	movs	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <xTaskResumeAll+0x138>)
 800295a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002968:	f001 f8c0 	bl	8003aec <vPortExitCritical>

	return xAlreadyYielded;
 800296c:	68bb      	ldr	r3, [r7, #8]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000974 	.word	0x20000974
 800297c:	2000094c 	.word	0x2000094c
 8002980:	2000090c 	.word	0x2000090c
 8002984:	20000954 	.word	0x20000954
 8002988:	20000850 	.word	0x20000850
 800298c:	2000084c 	.word	0x2000084c
 8002990:	20000960 	.word	0x20000960
 8002994:	2000095c 	.word	0x2000095c
 8002998:	e000ed04 	.word	0xe000ed04

0800299c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80029a2:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <xTaskGetTickCount+0x18>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000950 	.word	0x20000950

080029b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b00 <xTaskIncrementTick+0x148>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 808f 	bne.w	8002aea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <xTaskIncrementTick+0x14c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002b04 <xTaskIncrementTick+0x14c>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d121      	bne.n	8002a24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80029e0:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <xTaskIncrementTick+0x150>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <xTaskIncrementTick+0x4a>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	603b      	str	r3, [r7, #0]
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	e7fd      	b.n	80029fe <xTaskIncrementTick+0x46>
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <xTaskIncrementTick+0x150>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4b40      	ldr	r3, [pc, #256]	@ (8002b0c <xTaskIncrementTick+0x154>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b08 <xTaskIncrementTick+0x150>)
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4a3e      	ldr	r2, [pc, #248]	@ (8002b0c <xTaskIncrementTick+0x154>)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b3e      	ldr	r3, [pc, #248]	@ (8002b10 <xTaskIncrementTick+0x158>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b10 <xTaskIncrementTick+0x158>)
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	f000 fade 	bl	8002fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a24:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <xTaskIncrementTick+0x15c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d348      	bcc.n	8002ac0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a2e:	4b36      	ldr	r3, [pc, #216]	@ (8002b08 <xTaskIncrementTick+0x150>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a38:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <xTaskIncrementTick+0x15c>)
 8002a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3e:	601a      	str	r2, [r3, #0]
					break;
 8002a40:	e03e      	b.n	8002ac0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <xTaskIncrementTick+0x150>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d203      	bcs.n	8002a62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b14 <xTaskIncrementTick+0x15c>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a60:	e02e      	b.n	8002ac0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe ff78 	bl	800195c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3318      	adds	r3, #24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe ff6f 	bl	800195c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	2201      	movs	r2, #1
 8002a84:	409a      	lsls	r2, r3
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <xTaskIncrementTick+0x160>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <xTaskIncrementTick+0x160>)
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <xTaskIncrementTick+0x164>)
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe fefd 	bl	80018a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <xTaskIncrementTick+0x168>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3b9      	bcc.n	8002a2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002abe:	e7b6      	b.n	8002a2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ac0:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <xTaskIncrementTick+0x168>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac6:	4915      	ldr	r1, [pc, #84]	@ (8002b1c <xTaskIncrementTick+0x164>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d901      	bls.n	8002adc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <xTaskIncrementTick+0x16c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e004      	b.n	8002af4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <xTaskIncrementTick+0x170>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <xTaskIncrementTick+0x170>)
 8002af2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002af4:	697b      	ldr	r3, [r7, #20]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000974 	.word	0x20000974
 8002b04:	20000950 	.word	0x20000950
 8002b08:	20000904 	.word	0x20000904
 8002b0c:	20000908 	.word	0x20000908
 8002b10:	20000964 	.word	0x20000964
 8002b14:	2000096c 	.word	0x2000096c
 8002b18:	20000954 	.word	0x20000954
 8002b1c:	20000850 	.word	0x20000850
 8002b20:	2000084c 	.word	0x2000084c
 8002b24:	20000960 	.word	0x20000960
 8002b28:	2000095c 	.word	0x2000095c

08002b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b32:	4b29      	ldr	r3, [pc, #164]	@ (8002bd8 <vTaskSwitchContext+0xac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <vTaskSwitchContext+0xb0>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b40:	e045      	b.n	8002bce <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <vTaskSwitchContext+0xb0>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <vTaskSwitchContext+0xb4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b56:	7afb      	ldrb	r3, [r7, #11]
 8002b58:	f1c3 031f 	rsb	r3, r3, #31
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	4921      	ldr	r1, [pc, #132]	@ (8002be4 <vTaskSwitchContext+0xb8>)
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	607b      	str	r3, [r7, #4]
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	e7fd      	b.n	8002b86 <vTaskSwitchContext+0x5a>
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <vTaskSwitchContext+0xb8>)
 8002b96:	4413      	add	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	3308      	adds	r3, #8
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d104      	bne.n	8002bba <vTaskSwitchContext+0x8e>
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <vTaskSwitchContext+0xbc>)
 8002bc2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <vTaskSwitchContext+0xbc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	334c      	adds	r3, #76	@ 0x4c
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <vTaskSwitchContext+0xc0>)
 8002bcc:	6013      	str	r3, [r2, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	20000974 	.word	0x20000974
 8002bdc:	20000960 	.word	0x20000960
 8002be0:	20000954 	.word	0x20000954
 8002be4:	20000850 	.word	0x20000850
 8002be8:	2000084c 	.word	0x2000084c
 8002bec:	20000010 	.word	0x20000010

08002bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	60fb      	str	r3, [r7, #12]
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <vTaskPlaceOnEventList+0x48>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3318      	adds	r3, #24
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe fe63 	bl	80018ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c26:	2101      	movs	r1, #1
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f000 fa9f 	bl	800316c <prvAddCurrentTaskToDelayedList>
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000084c 	.word	0x2000084c

08002c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10b      	bne.n	8002c66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	617b      	str	r3, [r7, #20]
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <vTaskPlaceOnEventListRestricted+0x54>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7fe fe19 	bl	80018a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	68b8      	ldr	r0, [r7, #8]
 8002c84:	f000 fa72 	bl	800316c <prvAddCurrentTaskToDelayedList>
	}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000084c 	.word	0x2000084c

08002c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60fb      	str	r3, [r7, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	e7fd      	b.n	8002cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	3318      	adds	r3, #24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fe48 	bl	800195c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <xTaskRemoveFromEventList+0xb0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11c      	bne.n	8002d0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fe3f 	bl	800195c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <xTaskRemoveFromEventList+0xb4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <xTaskRemoveFromEventList+0xb4>)
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4a13      	ldr	r2, [pc, #76]	@ (8002d4c <xTaskRemoveFromEventList+0xb8>)
 8002cfe:	441a      	add	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7fe fdcd 	bl	80018a6 <vListInsertEnd>
 8002d0c:	e005      	b.n	8002d1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3318      	adds	r3, #24
 8002d12:	4619      	mov	r1, r3
 8002d14:	480e      	ldr	r0, [pc, #56]	@ (8002d50 <xTaskRemoveFromEventList+0xbc>)
 8002d16:	f7fe fdc6 	bl	80018a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <xTaskRemoveFromEventList+0xc0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d905      	bls.n	8002d34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <xTaskRemoveFromEventList+0xc4>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e001      	b.n	8002d38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002d38:	697b      	ldr	r3, [r7, #20]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000974 	.word	0x20000974
 8002d48:	20000954 	.word	0x20000954
 8002d4c:	20000850 	.word	0x20000850
 8002d50:	2000090c 	.word	0x2000090c
 8002d54:	2000084c 	.word	0x2000084c
 8002d58:	20000960 	.word	0x20000960

08002d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <vTaskInternalSetTimeOutState+0x24>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <vTaskInternalSetTimeOutState+0x28>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000964 	.word	0x20000964
 8002d84:	20000950 	.word	0x20000950

08002d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	613b      	str	r3, [r7, #16]
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60fb      	str	r3, [r7, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002dce:	f000 fe5d 	bl	8003a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <xTaskCheckForTimeOut+0xc0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d102      	bne.n	8002df2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	e023      	b.n	8002e3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <xTaskCheckForTimeOut+0xc4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d007      	beq.n	8002e0e <xTaskCheckForTimeOut+0x86>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	e015      	b.n	8002e3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d20b      	bcs.n	8002e30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	1ad2      	subs	r2, r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff99 	bl	8002d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e004      	b.n	8002e3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e3a:	f000 fe57 	bl	8003aec <vPortExitCritical>

	return xReturn;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000950 	.word	0x20000950
 8002e4c:	20000964 	.word	0x20000964

08002e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <vTaskMissedYield+0x14>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000960 	.word	0x20000960

08002e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e70:	f000 f852 	bl	8002f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <prvIdleTask+0x28>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d9f9      	bls.n	8002e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <prvIdleTask+0x2c>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e8c:	e7f0      	b.n	8002e70 <prvIdleTask+0x8>
 8002e8e:	bf00      	nop
 8002e90:	20000850 	.word	0x20000850
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	e00c      	b.n	8002ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <prvInitialiseTaskLists+0x60>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fccc 	bl	8001850 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d9ef      	bls.n	8002ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ec4:	480d      	ldr	r0, [pc, #52]	@ (8002efc <prvInitialiseTaskLists+0x64>)
 8002ec6:	f7fe fcc3 	bl	8001850 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002eca:	480d      	ldr	r0, [pc, #52]	@ (8002f00 <prvInitialiseTaskLists+0x68>)
 8002ecc:	f7fe fcc0 	bl	8001850 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ed0:	480c      	ldr	r0, [pc, #48]	@ (8002f04 <prvInitialiseTaskLists+0x6c>)
 8002ed2:	f7fe fcbd 	bl	8001850 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ed6:	480c      	ldr	r0, [pc, #48]	@ (8002f08 <prvInitialiseTaskLists+0x70>)
 8002ed8:	f7fe fcba 	bl	8001850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002edc:	480b      	ldr	r0, [pc, #44]	@ (8002f0c <prvInitialiseTaskLists+0x74>)
 8002ede:	f7fe fcb7 	bl	8001850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <prvInitialiseTaskLists+0x78>)
 8002ee4:	4a05      	ldr	r2, [pc, #20]	@ (8002efc <prvInitialiseTaskLists+0x64>)
 8002ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <prvInitialiseTaskLists+0x7c>)
 8002eea:	4a05      	ldr	r2, [pc, #20]	@ (8002f00 <prvInitialiseTaskLists+0x68>)
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000850 	.word	0x20000850
 8002efc:	200008dc 	.word	0x200008dc
 8002f00:	200008f0 	.word	0x200008f0
 8002f04:	2000090c 	.word	0x2000090c
 8002f08:	20000920 	.word	0x20000920
 8002f0c:	20000938 	.word	0x20000938
 8002f10:	20000904 	.word	0x20000904
 8002f14:	20000908 	.word	0x20000908

08002f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f1e:	e019      	b.n	8002f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f20:	f000 fdb4 	bl	8003a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f24:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <prvCheckTasksWaitingTermination+0x50>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fd13 	bl	800195c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <prvCheckTasksWaitingTermination+0x54>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <prvCheckTasksWaitingTermination+0x54>)
 8002f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <prvCheckTasksWaitingTermination+0x58>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <prvCheckTasksWaitingTermination+0x58>)
 8002f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f4a:	f000 fdcf 	bl	8003aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f810 	bl	8002f74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <prvCheckTasksWaitingTermination+0x58>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e1      	bne.n	8002f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000920 	.word	0x20000920
 8002f6c:	2000094c 	.word	0x2000094c
 8002f70:	20000934 	.word	0x20000934

08002f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	334c      	adds	r3, #76	@ 0x4c
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 f879 	bl	8004078 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d108      	bne.n	8002fa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ff49 	bl	8003e2c <vPortFree>
				vPortFree( pxTCB );
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 ff46 	bl	8003e2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002fa0:	e019      	b.n	8002fd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d103      	bne.n	8002fb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 ff3d 	bl	8003e2c <vPortFree>
	}
 8002fb2:	e010      	b.n	8002fd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d00b      	beq.n	8002fd6 <prvDeleteTCB+0x62>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60fb      	str	r3, [r7, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <prvDeleteTCB+0x5e>
	}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <prvResetNextTaskUnblockTime+0x38>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <prvResetNextTaskUnblockTime+0x3c>)
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ff8:	e008      	b.n	800300c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <prvResetNextTaskUnblockTime+0x38>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a04      	ldr	r2, [pc, #16]	@ (800301c <prvResetNextTaskUnblockTime+0x3c>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000904 	.word	0x20000904
 800301c:	2000096c 	.word	0x2000096c

08003020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <xTaskGetSchedulerState+0x34>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800302e:	2301      	movs	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e008      	b.n	8003046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <xTaskGetSchedulerState+0x38>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800303c:	2302      	movs	r3, #2
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	e001      	b.n	8003046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003046:	687b      	ldr	r3, [r7, #4]
	}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000958 	.word	0x20000958
 8003058:	20000974 	.word	0x20000974

0800305c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d070      	beq.n	8003154 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <xTaskPriorityDisinherit+0x104>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d00b      	beq.n	8003094 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	60fb      	str	r3, [r7, #12]
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	60bb      	str	r3, [r7, #8]
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b8:	1e5a      	subs	r2, r3, #1
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d044      	beq.n	8003154 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d140      	bne.n	8003154 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fc40 	bl	800195c <uxListRemove>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e6:	491f      	ldr	r1, [pc, #124]	@ (8003164 <xTaskPriorityDisinherit+0x108>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <xTaskPriorityDisinherit+0xb2>
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	2201      	movs	r2, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <xTaskPriorityDisinherit+0x10c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4013      	ands	r3, r2
 800310a:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <xTaskPriorityDisinherit+0x10c>)
 800310c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	f1c3 0207 	rsb	r2, r3, #7
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <xTaskPriorityDisinherit+0x10c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <xTaskPriorityDisinherit+0x10c>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <xTaskPriorityDisinherit+0x108>)
 8003142:	441a      	add	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fe fbab 	bl	80018a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003150:	2301      	movs	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003154:	697b      	ldr	r3, [r7, #20]
	}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	2000084c 	.word	0x2000084c
 8003164:	20000850 	.word	0x20000850
 8003168:	20000954 	.word	0x20000954

0800316c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003176:	4b29      	ldr	r3, [pc, #164]	@ (800321c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <prvAddCurrentTaskToDelayedList+0xb4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe fbea 	bl	800195c <uxListRemove>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800318e:	4b24      	ldr	r3, [pc, #144]	@ (8003220 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <prvAddCurrentTaskToDelayedList+0xb8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4013      	ands	r3, r2
 80031a2:	4a20      	ldr	r2, [pc, #128]	@ (8003224 <prvAddCurrentTaskToDelayedList+0xb8>)
 80031a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d10a      	bne.n	80031c4 <prvAddCurrentTaskToDelayedList+0x58>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	481a      	ldr	r0, [pc, #104]	@ (8003228 <prvAddCurrentTaskToDelayedList+0xbc>)
 80031be:	f7fe fb72 	bl	80018a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031c2:	e026      	b.n	8003212 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031cc:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d209      	bcs.n	80031f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <prvAddCurrentTaskToDelayedList+0xc0>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7fe fb7f 	bl	80018ec <vListInsert>
}
 80031ee:	e010      	b.n	8003212 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <prvAddCurrentTaskToDelayedList+0xc4>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7fe fb75 	bl	80018ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d202      	bcs.n	8003212 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800320c:	4a09      	ldr	r2, [pc, #36]	@ (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6013      	str	r3, [r2, #0]
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000950 	.word	0x20000950
 8003220:	2000084c 	.word	0x2000084c
 8003224:	20000954 	.word	0x20000954
 8003228:	20000938 	.word	0x20000938
 800322c:	20000908 	.word	0x20000908
 8003230:	20000904 	.word	0x20000904
 8003234:	2000096c 	.word	0x2000096c

08003238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	@ 0x28
 800323c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003242:	f000 faf5 	bl	8003830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <xTimerCreateTimerTask+0x84>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d021      	beq.n	8003292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003256:	1d3a      	adds	r2, r7, #4
 8003258:	f107 0108 	add.w	r1, r7, #8
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	4618      	mov	r0, r3
 8003262:	f7fc ff8d 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	9202      	str	r2, [sp, #8]
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2302      	movs	r3, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	460a      	mov	r2, r1
 8003278:	4911      	ldr	r1, [pc, #68]	@ (80032c0 <xTimerCreateTimerTask+0x88>)
 800327a:	4812      	ldr	r0, [pc, #72]	@ (80032c4 <xTimerCreateTimerTask+0x8c>)
 800327c:	f7ff f88c 	bl	8002398 <xTaskCreateStatic>
 8003280:	4603      	mov	r3, r0
 8003282:	4a11      	ldr	r2, [pc, #68]	@ (80032c8 <xTimerCreateTimerTask+0x90>)
 8003284:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <xTimerCreateTimerTask+0x90>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800328e:	2301      	movs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	613b      	str	r3, [r7, #16]
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80032b0:	697b      	ldr	r3, [r7, #20]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200009a8 	.word	0x200009a8
 80032c0:	0800428c 	.word	0x0800428c
 80032c4:	08003405 	.word	0x08003405
 80032c8:	200009ac 	.word	0x200009ac

080032cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <xTimerGenericCommand+0x30>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	623b      	str	r3, [r7, #32]
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <xTimerGenericCommand+0x98>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02a      	beq.n	800335a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b05      	cmp	r3, #5
 8003314:	dc18      	bgt.n	8003348 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003316:	f7ff fe83 	bl	8003020 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b02      	cmp	r3, #2
 800331e:	d109      	bne.n	8003334 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003320:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <xTimerGenericCommand+0x98>)
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	f107 0114 	add.w	r1, r7, #20
 8003328:	2300      	movs	r3, #0
 800332a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800332c:	f7fe fc46 	bl	8001bbc <xQueueGenericSend>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24
 8003332:	e012      	b.n	800335a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003334:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <xTimerGenericCommand+0x98>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	f107 0114 	add.w	r1, r7, #20
 800333c:	2300      	movs	r3, #0
 800333e:	2200      	movs	r2, #0
 8003340:	f7fe fc3c 	bl	8001bbc <xQueueGenericSend>
 8003344:	6278      	str	r0, [r7, #36]	@ 0x24
 8003346:	e008      	b.n	800335a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <xTimerGenericCommand+0x98>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	f107 0114 	add.w	r1, r7, #20
 8003350:	2300      	movs	r3, #0
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	f7fe fd34 	bl	8001dc0 <xQueueGenericSendFromISR>
 8003358:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	@ 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200009a8 	.word	0x200009a8

08003368 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003372:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <prvProcessExpiredTimer+0x98>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe faeb 	bl	800195c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d023      	beq.n	80033dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	18d1      	adds	r1, r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f000 f8d3 	bl	800354c <prvInsertTimerInActiveList>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d020      	beq.n	80033ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033ac:	2300      	movs	r3, #0
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	2100      	movs	r1, #0
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff88 	bl	80032cc <xTimerGenericCommand>
 80033bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d114      	bne.n	80033ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60fb      	str	r3, [r7, #12]
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	6978      	ldr	r0, [r7, #20]
 80033f4:	4798      	blx	r3
}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200009a0 	.word	0x200009a0

08003404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f859 	bl	80034c8 <prvGetNextExpireTime>
 8003416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4619      	mov	r1, r3
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f805 	bl	800342c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003422:	f000 f8d5 	bl	80035d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003426:	bf00      	nop
 8003428:	e7f0      	b.n	800340c <prvTimerTask+0x8>
	...

0800342c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003436:	f7ff fa05 	bl	8002844 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f864 	bl	800350c <prvSampleTimeNow>
 8003444:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d130      	bne.n	80034ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <prvProcessTimerOrBlockTask+0x3c>
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	429a      	cmp	r2, r3
 8003458:	d806      	bhi.n	8003468 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800345a:	f7ff fa01 	bl	8002860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff81 	bl	8003368 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003466:	e024      	b.n	80034b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800346e:	4b13      	ldr	r3, [pc, #76]	@ (80034bc <prvProcessTimerOrBlockTask+0x90>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <prvProcessTimerOrBlockTask+0x50>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <prvProcessTimerOrBlockTask+0x52>
 800347c:	2300      	movs	r3, #0
 800347e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <prvProcessTimerOrBlockTask+0x94>)
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	f7fe ff4f 	bl	8002330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003492:	f7ff f9e5 	bl	8002860 <xTaskResumeAll>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <prvProcessTimerOrBlockTask+0x98>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
}
 80034ac:	e001      	b.n	80034b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80034ae:	f7ff f9d7 	bl	8002860 <xTaskResumeAll>
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200009a4 	.word	0x200009a4
 80034c0:	200009a8 	.word	0x200009a8
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80034d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <prvGetNextExpireTime+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <prvGetNextExpireTime+0x16>
 80034da:	2201      	movs	r2, #1
 80034dc:	e000      	b.n	80034e0 <prvGetNextExpireTime+0x18>
 80034de:	2200      	movs	r2, #0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <prvGetNextExpireTime+0x40>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e001      	b.n	80034fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80034fc:	68fb      	ldr	r3, [r7, #12]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	200009a0 	.word	0x200009a0

0800350c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003514:	f7ff fa42 	bl	800299c <xTaskGetTickCount>
 8003518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800351a:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <prvSampleTimeNow+0x3c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d205      	bcs.n	8003530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003524:	f000 f91e 	bl	8003764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e002      	b.n	8003536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <prvSampleTimeNow+0x3c>)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800353c:	68fb      	ldr	r3, [r7, #12]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200009b0 	.word	0x200009b0

0800354c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d812      	bhi.n	8003598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e01b      	b.n	80035be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003586:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <prvInsertTimerInActiveList+0x7c>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe f9ab 	bl	80018ec <vListInsert>
 8003596:	e012      	b.n	80035be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d206      	bcs.n	80035ae <prvInsertTimerInActiveList+0x62>
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e007      	b.n	80035be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80035ae:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <prvInsertTimerInActiveList+0x80>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fe f997 	bl	80018ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 80035be:	697b      	ldr	r3, [r7, #20]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200009a4 	.word	0x200009a4
 80035cc:	200009a0 	.word	0x200009a0

080035d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	@ 0x30
 80035d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035d6:	e0b2      	b.n	800373e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f2c0 80af 	blt.w	800373e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	3304      	adds	r3, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe f9b3 	bl	800195c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff87 	bl	800350c <prvSampleTimeNow>
 80035fe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b09      	cmp	r3, #9
 8003604:	f200 8098 	bhi.w	8003738 <prvProcessReceivedCommands+0x168>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <prvProcessReceivedCommands+0x40>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003639 	.word	0x08003639
 8003614:	08003639 	.word	0x08003639
 8003618:	08003639 	.word	0x08003639
 800361c:	080036af 	.word	0x080036af
 8003620:	080036c3 	.word	0x080036c3
 8003624:	0800370f 	.word	0x0800370f
 8003628:	08003639 	.word	0x08003639
 800362c:	08003639 	.word	0x08003639
 8003630:	080036af 	.word	0x080036af
 8003634:	080036c3 	.word	0x080036c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	18d1      	adds	r1, r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003658:	f7ff ff78 	bl	800354c <prvInsertTimerInActiveList>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06c      	beq.n	800373c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003668:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d061      	beq.n	800373c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	441a      	add	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2300      	movs	r3, #0
 8003686:	2100      	movs	r1, #0
 8003688:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800368a:	f7ff fe1f 	bl	80032cc <xTimerGenericCommand>
 800368e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d152      	bne.n	800373c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	61bb      	str	r3, [r7, #24]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80036c0:	e03d      	b.n	800373e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	617b      	str	r3, [r7, #20]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	18d1      	adds	r1, r2, r3
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003708:	f7ff ff20 	bl	800354c <prvInsertTimerInActiveList>
					break;
 800370c:	e017      	b.n	800373e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800371c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800371e:	f000 fb85 	bl	8003e2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003722:	e00c      	b.n	800373e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003736:	e002      	b.n	800373e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8003738:	bf00      	nop
 800373a:	e000      	b.n	800373e <prvProcessReceivedCommands+0x16e>
					break;
 800373c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800373e:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <prvProcessReceivedCommands+0x190>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f107 0108 	add.w	r1, r7, #8
 8003746:	2200      	movs	r2, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fbd7 	bl	8001efc <xQueueReceive>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af41 	bne.w	80035d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	3728      	adds	r7, #40	@ 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200009a8 	.word	0x200009a8

08003764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800376a:	e049      	b.n	8003800 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800376c:	4b2e      	ldr	r3, [pc, #184]	@ (8003828 <prvSwitchTimerLists+0xc4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003776:	4b2c      	ldr	r3, [pc, #176]	@ (8003828 <prvSwitchTimerLists+0xc4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3304      	adds	r3, #4
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe f8e9 	bl	800195c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02f      	beq.n	8003800 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90e      	bls.n	80037d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <prvSwitchTimerLists+0xc4>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe f88f 	bl	80018ec <vListInsert>
 80037ce:	e017      	b.n	8003800 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	2100      	movs	r1, #0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff fd76 	bl	80032cc <xTimerGenericCommand>
 80037e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	603b      	str	r3, [r7, #0]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <prvSwitchTimerLists+0xc4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1b0      	bne.n	800376c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800380a:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <prvSwitchTimerLists+0xc4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <prvSwitchTimerLists+0xc8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <prvSwitchTimerLists+0xc4>)
 8003816:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003818:	4a04      	ldr	r2, [pc, #16]	@ (800382c <prvSwitchTimerLists+0xc8>)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6013      	str	r3, [r2, #0]
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200009a0 	.word	0x200009a0
 800382c:	200009a4 	.word	0x200009a4

08003830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003836:	f000 f929 	bl	8003a8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800383a:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <prvCheckForValidListAndQueue+0x60>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d120      	bne.n	8003884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003842:	4814      	ldr	r0, [pc, #80]	@ (8003894 <prvCheckForValidListAndQueue+0x64>)
 8003844:	f7fe f804 	bl	8001850 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003848:	4813      	ldr	r0, [pc, #76]	@ (8003898 <prvCheckForValidListAndQueue+0x68>)
 800384a:	f7fe f801 	bl	8001850 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <prvCheckForValidListAndQueue+0x6c>)
 8003850:	4a10      	ldr	r2, [pc, #64]	@ (8003894 <prvCheckForValidListAndQueue+0x64>)
 8003852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <prvCheckForValidListAndQueue+0x70>)
 8003856:	4a10      	ldr	r2, [pc, #64]	@ (8003898 <prvCheckForValidListAndQueue+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <prvCheckForValidListAndQueue+0x74>)
 8003860:	4a11      	ldr	r2, [pc, #68]	@ (80038a8 <prvCheckForValidListAndQueue+0x78>)
 8003862:	210c      	movs	r1, #12
 8003864:	200a      	movs	r0, #10
 8003866:	f7fe f90d 	bl	8001a84 <xQueueGenericCreateStatic>
 800386a:	4603      	mov	r3, r0
 800386c:	4a08      	ldr	r2, [pc, #32]	@ (8003890 <prvCheckForValidListAndQueue+0x60>)
 800386e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003870:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <prvCheckForValidListAndQueue+0x60>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <prvCheckForValidListAndQueue+0x60>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	490b      	ldr	r1, [pc, #44]	@ (80038ac <prvCheckForValidListAndQueue+0x7c>)
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fd2e 	bl	80022e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003884:	f000 f932 	bl	8003aec <vPortExitCritical>
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200009a8 	.word	0x200009a8
 8003894:	20000978 	.word	0x20000978
 8003898:	2000098c 	.word	0x2000098c
 800389c:	200009a0 	.word	0x200009a0
 80038a0:	200009a4 	.word	0x200009a4
 80038a4:	20000a2c 	.word	0x20000a2c
 80038a8:	200009b4 	.word	0x200009b4
 80038ac:	08004294 	.word	0x08004294

080038b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3b04      	subs	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b04      	subs	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b04      	subs	r3, #4
 80038de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038e0:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <pxPortInitialiseStack+0x54>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b14      	subs	r3, #20
 80038ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b20      	subs	r3, #32
 80038f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038f8:	68fb      	ldr	r3, [r7, #12]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	08003909 	.word	0x08003909

08003908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <prvTaskExitError+0x54>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d00b      	beq.n	8003934 <prvTaskExitError+0x2c>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <prvTaskExitError+0x28>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60bb      	str	r3, [r7, #8]
}
 8003946:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003948:	bf00      	nop
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0fc      	beq.n	800394a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	2000000c 	.word	0x2000000c

08003960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <pxCurrentTCBConst2>)
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	6808      	ldr	r0, [r1, #0]
 8003966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800396a:	f380 8809 	msr	PSP, r0
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	f380 8811 	msr	BASEPRI, r0
 800397a:	f04e 0e0d 	orr.w	lr, lr, #13
 800397e:	4770      	bx	lr

08003980 <pxCurrentTCBConst2>:
 8003980:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop

08003988 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003988:	4806      	ldr	r0, [pc, #24]	@ (80039a4 <prvPortStartFirstTask+0x1c>)
 800398a:	6800      	ldr	r0, [r0, #0]
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	f380 8808 	msr	MSP, r0
 8003992:	b662      	cpsie	i
 8003994:	b661      	cpsie	f
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	df00      	svc	0
 80039a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039a2:	bf00      	nop
 80039a4:	e000ed08 	.word	0xe000ed08

080039a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039ae:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <xPortStartScheduler+0xd0>)
 80039b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	22ff      	movs	r2, #255	@ 0xff
 80039be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <xPortStartScheduler+0xd4>)
 80039d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <xPortStartScheduler+0xd8>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039dc:	e009      	b.n	80039f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039de:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <xPortStartScheduler+0xd8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <xPortStartScheduler+0xd8>)
 80039e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b80      	cmp	r3, #128	@ 0x80
 80039fc:	d0ef      	beq.n	80039de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039fe:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d00b      	beq.n	8003a22 <xPortStartScheduler+0x7a>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	60bb      	str	r3, [r7, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a22:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a2c:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a34:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a40:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0f      	ldr	r2, [pc, #60]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0c      	ldr	r2, [pc, #48]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a58:	f000 f8b8 	bl	8003bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <xPortStartScheduler+0xe0>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a62:	f7ff ff91 	bl	8003988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a66:	f7ff f861 	bl	8002b2c <vTaskSwitchContext>
	prvTaskExitError();
 8003a6a:	f7ff ff4d 	bl	8003908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000e400 	.word	0xe000e400
 8003a7c:	20000a74 	.word	0x20000a74
 8003a80:	20000a78 	.word	0x20000a78
 8003a84:	e000ed20 	.word	0xe000ed20
 8003a88:	2000000c 	.word	0x2000000c

08003a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	607b      	str	r3, [r7, #4]
}
 8003aa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <vPortEnterCritical+0x58>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae4 <vPortEnterCritical+0x58>)
 8003aae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <vPortEnterCritical+0x58>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d110      	bne.n	8003ada <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <vPortEnterCritical+0x5c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <vPortEnterCritical+0x4e>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	603b      	str	r3, [r7, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <vPortEnterCritical+0x4a>
	}
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	2000000c 	.word	0x2000000c
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <vPortExitCritical+0x50>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <vPortExitCritical+0x26>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b1c:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <vPortExitCritical+0x44>
 8003b24:	2300      	movs	r3, #0
 8003b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f383 8811 	msr	BASEPRI, r3
}
 8003b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000000c 	.word	0x2000000c

08003b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b40:	f3ef 8009 	mrs	r0, PSP
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <pxCurrentTCBConst>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b50:	6010      	str	r0, [r2, #0]
 8003b52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b5a:	f380 8811 	msr	BASEPRI, r0
 8003b5e:	f7fe ffe5 	bl	8002b2c <vTaskSwitchContext>
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8811 	msr	BASEPRI, r0
 8003b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6808      	ldr	r0, [r1, #0]
 8003b72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b76:	f380 8809 	msr	PSP, r0
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	4770      	bx	lr

08003b80 <pxCurrentTCBConst>:
 8003b80:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	607b      	str	r3, [r7, #4]
}
 8003ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ba2:	f7fe ff09 	bl	80029b8 <xTaskIncrementTick>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <SysTick_Handler+0x40>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f383 8811 	msr	BASEPRI, r3
}
 8003bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <vPortSetupTimerInterrupt+0x30>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <vPortSetupTimerInterrupt+0x34>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <vPortSetupTimerInterrupt+0x38>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a09      	ldr	r2, [pc, #36]	@ (8003c08 <vPortSetupTimerInterrupt+0x3c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	4a08      	ldr	r2, [pc, #32]	@ (8003c0c <vPortSetupTimerInterrupt+0x40>)
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bee:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <vPortSetupTimerInterrupt+0x30>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e010 	.word	0xe000e010
 8003c00:	e000e018 	.word	0xe000e018
 8003c04:	20000000 	.word	0x20000000
 8003c08:	10624dd3 	.word	0x10624dd3
 8003c0c:	e000e014 	.word	0xe000e014

08003c10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c16:	f3ef 8305 	mrs	r3, IPSR
 8003c1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d915      	bls.n	8003c4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c22:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <vPortValidateInterruptPriority+0x70>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c2c:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <vPortValidateInterruptPriority+0x74>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	7afa      	ldrb	r2, [r7, #11]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d20b      	bcs.n	8003c4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	607b      	str	r3, [r7, #4]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <vPortValidateInterruptPriority+0x78>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <vPortValidateInterruptPriority+0x7c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d90b      	bls.n	8003c76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	603b      	str	r3, [r7, #0]
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <vPortValidateInterruptPriority+0x62>
	}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	e000e3f0 	.word	0xe000e3f0
 8003c84:	20000a74 	.word	0x20000a74
 8003c88:	e000ed0c 	.word	0xe000ed0c
 8003c8c:	20000a78 	.word	0x20000a78

08003c90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c9c:	f7fe fdd2 	bl	8002844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <pvPortMalloc+0x184>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ca8:	f000 f924 	bl	8003ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <pvPortMalloc+0x188>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 8095 	bne.w	8003de4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01e      	beq.n	8003cfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f023 0307 	bic.w	r3, r3, #7
 8003cd8:	3308      	adds	r3, #8
 8003cda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <pvPortMalloc+0x6e>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d06f      	beq.n	8003de4 <pvPortMalloc+0x154>
 8003d04:	4b45      	ldr	r3, [pc, #276]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d86a      	bhi.n	8003de4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d0e:	4b44      	ldr	r3, [pc, #272]	@ (8003e20 <pvPortMalloc+0x190>)
 8003d10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d12:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <pvPortMalloc+0x190>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d18:	e004      	b.n	8003d24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <pvPortMalloc+0xa6>
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f1      	bne.n	8003d1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <pvPortMalloc+0x184>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d051      	beq.n	8003de4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4413      	add	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d920      	bls.n	8003da4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <pvPortMalloc+0xfc>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	613b      	str	r3, [r7, #16]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d9e:	69b8      	ldr	r0, [r7, #24]
 8003da0:	f000 f90a 	bl	8003fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003db0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003db2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <pvPortMalloc+0x194>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d203      	bcs.n	8003dc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dbe:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <pvPortMalloc+0x194>)
 8003dc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <pvPortMalloc+0x188>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <pvPortMalloc+0x198>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a11      	ldr	r2, [pc, #68]	@ (8003e28 <pvPortMalloc+0x198>)
 8003de2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003de4:	f7fe fd3c 	bl	8002860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <pvPortMalloc+0x17a>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60fb      	str	r3, [r7, #12]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <pvPortMalloc+0x176>
	return pvReturn;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	@ 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20001684 	.word	0x20001684
 8003e18:	20001698 	.word	0x20001698
 8003e1c:	20001688 	.word	0x20001688
 8003e20:	2000167c 	.word	0x2000167c
 8003e24:	2000168c 	.word	0x2000168c
 8003e28:	20001690 	.word	0x20001690

08003e2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04f      	beq.n	8003ede <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e3e:	2308      	movs	r3, #8
 8003e40:	425b      	negs	r3, r3
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <vPortFree+0xbc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <vPortFree+0x46>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60fb      	str	r3, [r7, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <vPortFree+0x66>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	60bb      	str	r3, [r7, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <vPortFree+0xbc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11a      	bne.n	8003ede <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <vPortFree+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003eb8:	f7fe fcc4 	bl	8002844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <vPortFree+0xc0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <vPortFree+0xc0>)
 8003ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eca:	6938      	ldr	r0, [r7, #16]
 8003ecc:	f000 f874 	bl	8003fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <vPortFree+0xc4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a06      	ldr	r2, [pc, #24]	@ (8003ef0 <vPortFree+0xc4>)
 8003ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eda:	f7fe fcc1 	bl	8002860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20001698 	.word	0x20001698
 8003eec:	20001688 	.word	0x20001688
 8003ef0:	20001694 	.word	0x20001694

08003ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003efa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f00:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <prvHeapInit+0xac>)
 8003f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3307      	adds	r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa0 <prvHeapInit+0xac>)
 8003f24:	4413      	add	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <prvHeapInit+0xb0>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <prvHeapInit+0xb0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f40:	2208      	movs	r2, #8
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f5e:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <prvHeapInit+0xb8>)
 8003f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <prvHeapInit+0xbc>)
 8003f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <prvHeapInit+0xc0>)
 8003f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000a7c 	.word	0x20000a7c
 8003fa4:	2000167c 	.word	0x2000167c
 8003fa8:	20001684 	.word	0x20001684
 8003fac:	2000168c 	.word	0x2000168c
 8003fb0:	20001688 	.word	0x20001688
 8003fb4:	20001698 	.word	0x20001698

08003fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fc0:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <prvInsertBlockIntoFreeList+0xa8>)
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e002      	b.n	8003fcc <prvInsertBlockIntoFreeList+0x14>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d8f7      	bhi.n	8003fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d108      	bne.n	8003ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	441a      	add	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d118      	bne.n	8004040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <prvInsertBlockIntoFreeList+0xac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d00d      	beq.n	8004036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e008      	b.n	8004048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvInsertBlockIntoFreeList+0xac>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e003      	b.n	8004048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d002      	beq.n	8004056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	2000167c 	.word	0x2000167c
 8004064:	20001684 	.word	0x20001684

08004068 <memset>:
 8004068:	4603      	mov	r3, r0
 800406a:	4402      	add	r2, r0
 800406c:	4293      	cmp	r3, r2
 800406e:	d100      	bne.n	8004072 <memset+0xa>
 8004070:	4770      	bx	lr
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	e7f9      	b.n	800406c <memset+0x4>

08004078 <_reclaim_reent>:
 8004078:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <_reclaim_reent+0xb8>)
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4604      	mov	r4, r0
 8004080:	4283      	cmp	r3, r0
 8004082:	d053      	beq.n	800412c <_reclaim_reent+0xb4>
 8004084:	69c3      	ldr	r3, [r0, #28]
 8004086:	b31b      	cbz	r3, 80040d0 <_reclaim_reent+0x58>
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	b163      	cbz	r3, 80040a6 <_reclaim_reent+0x2e>
 800408c:	2500      	movs	r5, #0
 800408e:	69e3      	ldr	r3, [r4, #28]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	5959      	ldr	r1, [r3, r5]
 8004094:	b9b1      	cbnz	r1, 80040c4 <_reclaim_reent+0x4c>
 8004096:	3504      	adds	r5, #4
 8004098:	2d80      	cmp	r5, #128	@ 0x80
 800409a:	d1f8      	bne.n	800408e <_reclaim_reent+0x16>
 800409c:	69e3      	ldr	r3, [r4, #28]
 800409e:	4620      	mov	r0, r4
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	f000 f87b 	bl	800419c <_free_r>
 80040a6:	69e3      	ldr	r3, [r4, #28]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	b111      	cbz	r1, 80040b2 <_reclaim_reent+0x3a>
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 f875 	bl	800419c <_free_r>
 80040b2:	69e3      	ldr	r3, [r4, #28]
 80040b4:	689d      	ldr	r5, [r3, #8]
 80040b6:	b15d      	cbz	r5, 80040d0 <_reclaim_reent+0x58>
 80040b8:	4629      	mov	r1, r5
 80040ba:	4620      	mov	r0, r4
 80040bc:	682d      	ldr	r5, [r5, #0]
 80040be:	f000 f86d 	bl	800419c <_free_r>
 80040c2:	e7f8      	b.n	80040b6 <_reclaim_reent+0x3e>
 80040c4:	680e      	ldr	r6, [r1, #0]
 80040c6:	4620      	mov	r0, r4
 80040c8:	f000 f868 	bl	800419c <_free_r>
 80040cc:	4631      	mov	r1, r6
 80040ce:	e7e1      	b.n	8004094 <_reclaim_reent+0x1c>
 80040d0:	6961      	ldr	r1, [r4, #20]
 80040d2:	b111      	cbz	r1, 80040da <_reclaim_reent+0x62>
 80040d4:	4620      	mov	r0, r4
 80040d6:	f000 f861 	bl	800419c <_free_r>
 80040da:	69e1      	ldr	r1, [r4, #28]
 80040dc:	b111      	cbz	r1, 80040e4 <_reclaim_reent+0x6c>
 80040de:	4620      	mov	r0, r4
 80040e0:	f000 f85c 	bl	800419c <_free_r>
 80040e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80040e6:	b111      	cbz	r1, 80040ee <_reclaim_reent+0x76>
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 f857 	bl	800419c <_free_r>
 80040ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040f0:	b111      	cbz	r1, 80040f8 <_reclaim_reent+0x80>
 80040f2:	4620      	mov	r0, r4
 80040f4:	f000 f852 	bl	800419c <_free_r>
 80040f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80040fa:	b111      	cbz	r1, 8004102 <_reclaim_reent+0x8a>
 80040fc:	4620      	mov	r0, r4
 80040fe:	f000 f84d 	bl	800419c <_free_r>
 8004102:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004104:	b111      	cbz	r1, 800410c <_reclaim_reent+0x94>
 8004106:	4620      	mov	r0, r4
 8004108:	f000 f848 	bl	800419c <_free_r>
 800410c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800410e:	b111      	cbz	r1, 8004116 <_reclaim_reent+0x9e>
 8004110:	4620      	mov	r0, r4
 8004112:	f000 f843 	bl	800419c <_free_r>
 8004116:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004118:	b111      	cbz	r1, 8004120 <_reclaim_reent+0xa8>
 800411a:	4620      	mov	r0, r4
 800411c:	f000 f83e 	bl	800419c <_free_r>
 8004120:	6a23      	ldr	r3, [r4, #32]
 8004122:	b11b      	cbz	r3, 800412c <_reclaim_reent+0xb4>
 8004124:	4620      	mov	r0, r4
 8004126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800412a:	4718      	bx	r3
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	bf00      	nop
 8004130:	20000010 	.word	0x20000010

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	2600      	movs	r6, #0
 8004138:	4d0c      	ldr	r5, [pc, #48]	@ (800416c <__libc_init_array+0x38>)
 800413a:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413c:	1b64      	subs	r4, r4, r5
 800413e:	10a4      	asrs	r4, r4, #2
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	f000 f87e 	bl	8004244 <_init>
 8004148:	2600      	movs	r6, #0
 800414a:	4d0a      	ldr	r5, [pc, #40]	@ (8004174 <__libc_init_array+0x40>)
 800414c:	4c0a      	ldr	r4, [pc, #40]	@ (8004178 <__libc_init_array+0x44>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	080042c8 	.word	0x080042c8
 8004170:	080042c8 	.word	0x080042c8
 8004174:	080042c8 	.word	0x080042c8
 8004178:	080042cc 	.word	0x080042cc

0800417c <__retarget_lock_acquire_recursive>:
 800417c:	4770      	bx	lr

0800417e <__retarget_lock_release_recursive>:
 800417e:	4770      	bx	lr

08004180 <memcpy>:
 8004180:	440a      	add	r2, r1
 8004182:	4291      	cmp	r1, r2
 8004184:	f100 33ff 	add.w	r3, r0, #4294967295
 8004188:	d100      	bne.n	800418c <memcpy+0xc>
 800418a:	4770      	bx	lr
 800418c:	b510      	push	{r4, lr}
 800418e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004192:	4291      	cmp	r1, r2
 8004194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004198:	d1f9      	bne.n	800418e <memcpy+0xe>
 800419a:	bd10      	pop	{r4, pc}

0800419c <_free_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4605      	mov	r5, r0
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d040      	beq.n	8004226 <_free_r+0x8a>
 80041a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a8:	1f0c      	subs	r4, r1, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfb8      	it	lt
 80041ae:	18e4      	addlt	r4, r4, r3
 80041b0:	f000 f83c 	bl	800422c <__malloc_lock>
 80041b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004228 <_free_r+0x8c>)
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	b933      	cbnz	r3, 80041c8 <_free_r+0x2c>
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	4628      	mov	r0, r5
 80041c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041c4:	f000 b838 	b.w	8004238 <__malloc_unlock>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d908      	bls.n	80041de <_free_r+0x42>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	1821      	adds	r1, r4, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1809      	addeq	r1, r1, r0
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	e7ed      	b.n	80041ba <_free_r+0x1e>
 80041de:	461a      	mov	r2, r3
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b10b      	cbz	r3, 80041e8 <_free_r+0x4c>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d9fa      	bls.n	80041de <_free_r+0x42>
 80041e8:	6811      	ldr	r1, [r2, #0]
 80041ea:	1850      	adds	r0, r2, r1
 80041ec:	42a0      	cmp	r0, r4
 80041ee:	d10b      	bne.n	8004208 <_free_r+0x6c>
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	4401      	add	r1, r0
 80041f4:	1850      	adds	r0, r2, r1
 80041f6:	4283      	cmp	r3, r0
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	d1e0      	bne.n	80041be <_free_r+0x22>
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4408      	add	r0, r1
 8004202:	6010      	str	r0, [r2, #0]
 8004204:	6053      	str	r3, [r2, #4]
 8004206:	e7da      	b.n	80041be <_free_r+0x22>
 8004208:	d902      	bls.n	8004210 <_free_r+0x74>
 800420a:	230c      	movs	r3, #12
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	e7d6      	b.n	80041be <_free_r+0x22>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	1821      	adds	r1, r4, r0
 8004214:	428b      	cmp	r3, r1
 8004216:	bf01      	itttt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	1809      	addeq	r1, r1, r0
 800421e:	6021      	streq	r1, [r4, #0]
 8004220:	6063      	str	r3, [r4, #4]
 8004222:	6054      	str	r4, [r2, #4]
 8004224:	e7cb      	b.n	80041be <_free_r+0x22>
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	200017d8 	.word	0x200017d8

0800422c <__malloc_lock>:
 800422c:	4801      	ldr	r0, [pc, #4]	@ (8004234 <__malloc_lock+0x8>)
 800422e:	f7ff bfa5 	b.w	800417c <__retarget_lock_acquire_recursive>
 8004232:	bf00      	nop
 8004234:	200017d4 	.word	0x200017d4

08004238 <__malloc_unlock>:
 8004238:	4801      	ldr	r0, [pc, #4]	@ (8004240 <__malloc_unlock+0x8>)
 800423a:	f7ff bfa0 	b.w	800417e <__retarget_lock_release_recursive>
 800423e:	bf00      	nop
 8004240:	200017d4 	.word	0x200017d4

08004244 <_init>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr

08004250 <_fini>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr
